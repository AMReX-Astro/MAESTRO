! This module stores the runtime parameters.  The probin_init() routine is
! used to initialize the runtime parameters

module probin_module

  use bl_types
  use bl_space
  use bl_constants_module
  use pred_parameters
  use bc_module

  implicit none

  private

  @@declarationsA@@

  real(dp_t), save, public    :: burning_cutoff_density  ! note: presently not runtime parameter


  ! Keep track of the inputs file that was used to read in runtime
  ! parameters.  This filename will be written into the job_info file.
  character (len=128), save, public :: inputs_file_used = ""


  ! These will be allocated and defined below
  logical,    allocatable, save, public :: nodal(:)
  logical,    allocatable, save, public :: pmask(:)
  real(dp_t), allocatable, save, public :: prob_lo(:)
  real(dp_t), allocatable, save, public :: prob_hi(:)

end module probin_module


module extern_probin_module

  use bl_types
  use bl_space

  implicit none

  private

  @@declarationsB@@

end module extern_probin_module


module runtime_init_module

  use bl_types
  use probin_module
  use extern_probin_module

  implicit none

  @@namelist@@

  private

  public :: probin

  public :: runtime_init, runtime_close, runtime_pretty_print

contains

  subroutine runtime_init()

    use f2kcli
    use parallel
    use bl_IO_module
    use bl_prof_module
    use bl_error_module
    use bl_constants_module
    use knapsack_module
    use multifab_module, only: multifab_set_alltoallv
    use cluster_module
    use layout_module
    use pred_parameters
    use bc_module
    
    integer    :: narg, farg

    character(len=128) :: fname

    logical    :: lexist
    integer    :: natonce, myproc, nprocs, nsets, myset, iset, ibuff(1)
    integer    :: wakeuppid, waitforpid, tag, un, ierr
    real(dp_t) :: pistart, piend, pitotal, pistartall, piendall, pitotalall
    real(dp_t) :: pitotal_max, pitotalall_max

    type(bl_prof_timer), save :: bpt

    call build(bpt, "runtime_init")

    narg = command_argument_count()


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! initialize the runtime parameters
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


    !
    ! Don't have more than 64 processes trying to read from disk at once.
    !
    natonce = min(64,parallel_nprocs())
    myproc  = parallel_myproc()
    nprocs  = parallel_nprocs()
    nsets   = ((nprocs + (natonce - 1)) / natonce)
    myset   = (myproc / natonce)
    pistart = 0.d0
    piend   = 0.d0

    pistartall = parallel_wtime()

    ! read the inputs file -- it is expected to be the first argument on
    ! the commandline
    do iset = 0, nsets-1

       if (myset .eq. iset) then

          pistart = parallel_wtime()
          
          farg = 1
          if ( narg >= 1 ) then
             call get_command_argument(farg, value = fname)
             inquire(file = fname, exist = lexist )
             if ( lexist ) then
                farg = farg + 1
                un = unit_new()
                open(unit=un, file = fname, status = 'old', action = 'read')
                read(unit=un, nml = probin)
                close(unit=un)
                inputs_file_used = fname
             else
                call bl_error("ERROR: inputs file does not exist")
             endif
          else
             call bl_error("ERROR: no inputs file specified")
	  endif

          piend = parallel_wtime()

          ibuff(1)  = 0
          wakeuppid = myproc + natonce
          tag       = mod(myproc,natonce)
          
          if (wakeuppid < nprocs) call parallel_send(ibuff, wakeuppid, tag)

       end if

      if (myset .eq. (iset + 1)) then

         tag        = mod(myproc,natonce)
         waitforpid = myproc - natonce

         call parallel_recv(ibuff, waitforpid, tag)
      endif

    end do

    piendall   = parallel_wtime()
    pitotal    = piend - pistart
    pitotalall = piendall - pistartall

    call parallel_reduce(pitotal_max,    pitotal,    MPI_MAX, &
                         proc = parallel_IOProcessorNode())
    call parallel_reduce(pitotalall_max, pitotalall, MPI_MAX, &
                         proc = parallel_IOProcessorNode())

    if (parallel_IOProcessor()) then
      print*, "PROBINIT max time   = ", pitotal_max
      print*, "PROBINIT total time = ", pitotalall_max
    endif

    do while ( farg <= narg )
       call get_command_argument(farg, value = fname)
       select case (fname)


       @@commandline@@


       case ('--')
          farg = farg + 1
          exit

       case default
          if ( parallel_IOProcessor() ) then
             write(*,*) 'UNKNOWN option = ', fname
          end if
          call bl_error("Unknown option")
       end select

       farg = farg + 1
    end do


    !-------------------------------------------------------------------------
    ! some sanity checks and set some defaults
    !-------------------------------------------------------------------------

    if (ref_ratio .ne. 2) then
       call bl_error("Only supporting ref_ratio = 2")
    end if

    if (plot_spec .eqv. .false.) plot_omegadot = .false.

    if (use_tfromp .and. dpdt_factor /= 0.0d0) then
       call bl_error("ERROR: use_tfromp = T requires dpdt_factor = 0 to decouple enthalpy")
    endif

    if (max_grid_size_1 .eq. -1) then
       max_grid_size_1 = max_grid_size
    end if

    if (max_grid_size_2 .eq. -1) then
       max_grid_size_2 = max_grid_size
    end if

    if (max_grid_size_3 .eq. -1) then
       max_grid_size_3 = max_grid_size
    end if

    if (spherical_in == 1 .and. do_planar_invsq_grav) then
       call bl_error("ERROR: do_planar_invsq_grav invalid for spherical geometries")
    endif

    if (do_2d_planar_octant == 1) then
       if ( dm_in /= 2) then	
       	  call bl_error("ERROR: do_2d_planar_octant requires dm_in = 2")
       endif
       if (spherical_in ==1) then
       	  call bl_error("ERROR: do_2d_planar_octant requires spherical_in = 0")
       endif
       if (prob_lo_y /= ZERO) then
       	  call bl_error("ERROR: do_2d_planar_octant requires prob_lo(2) = 0")
       endif
    endif

    if (do_planar_invsq_grav) then
       if ( (dm_in == 2 .and. prob_lo_y <= ZERO) .or. &
            (dm_in == 3 .and. prob_lo_z <= ZERO) )then
          call bl_error("ERROR: do_planar_invsq_grav requires prob_lo(dm) > 0")
       endif
    endif

    if (max_mg_bottom_nlevels .lt. 2) then
       call bl_error("ERROR: max_mg_bottom_nlevels must be greater than 1")
    endif

    ! make sure that the buffer width for tagging is atleast as big as
    ! the regrid interval
    if (regrid_int > 0 .and. amr_buf_width < regrid_int) then
       if (parallel_IOProcessor()) then
          print *,"************************************************************************"
          print *,"WARNING: regrid_int > 0 but amr_buf_width < regrid_int"
          print *,"         setting amr_buf_width = regrid_int"
          print *,"************************************************************************"          
       endif
       amr_buf_width = regrid_int
    endif

    if ( max_levs > 1 .AND. test_set .eq. '' .AND. regrid_int < 0 ) then
        call bl_error("ERROR: must set regrid_int to use AMR")
    end	 if

    if (ppm_type .lt. 0 .or. ppm_type .gt. 2) then
       call bl_error("invalid ppm_type")
    end if

    if (bds_type .lt. 0 .or. bds_type .gt. 1) then
       call bl_error("invalid bds_type")
    end if

    if (do_smallscale) then
       if (parallel_IOProcessor()) then
          print *,"************************************************************************"
          print *,"WARNING: do_smallscale=T; Make sure your initialization sets p0=constant"
          print *,"************************************************************************"
       end if
       if (evolve_base_state) then
          call bl_error("do_smallscale requires evolve_base_state = F")
       end if
       if (beta_type .ne. 3) then
          call bl_error("do_smallscale requires beta_type = 3")
       end if
    end if

    ! check species and enthalpy types
    if (.not. (species_pred_type == predict_rhoprime_and_X .or. &
               species_pred_type == predict_rhoX .or. &
               species_pred_type == predict_rho_and_X)) then
       call bl_error("invalid species_pred_type")
    endif

    if (.not. (enthalpy_pred_type == predict_rhoh .or. &
               enthalpy_pred_type == predict_rhohprime .or. &
               enthalpy_pred_type == predict_h .or. &
               enthalpy_pred_type == predict_T_then_rhohprime .or. &
               enthalpy_pred_type == predict_T_then_h .or. &
               enthalpy_pred_type == predict_hprime .or. &
               enthalpy_pred_type == predict_Tprime_then_h)) then
       call bl_error("invalid enthalpy_pred_type")
    endif


    ! use_tfromp = T is not compatible with enthalpy_pred_types
    ! predict_T_then_rhohprime or predict_T_then_h, since the
    ! temperature update in react state doesn't 'see' the energy
    ! release.
    if (use_tfromp .and. &
         (enthalpy_pred_type == predict_T_then_rhohprime .or. &
          enthalpy_pred_type == predict_T_then_h)) then
       call bl_error("use_tfromp not supported with enthalpy_pred_type predict_T_then_rhohprime or predict_T_then_h")
    endif


    ! for the moment, set the cutoff for burning to be base_cutoff_density
    burning_cutoff_density = base_cutoff_density

    ! initialize nodal
    allocate(nodal(dm_in))
    nodal = .true.

    ! if the string versions of the boundary conditions were set, then	
    ! these override the integer values
    if (.not. xlo_boundary_type == "") &
         bcx_lo = bc_string_to_integer(trim(xlo_boundary_type))

    if (.not. xhi_boundary_type == "") &
         bcx_hi = bc_string_to_integer(trim(xhi_boundary_type))

    if (.not. ylo_boundary_type == "") &
         bcy_lo = bc_string_to_integer(trim(ylo_boundary_type))

    if (.not. yhi_boundary_type == "") &
         bcy_hi = bc_string_to_integer(trim(yhi_boundary_type))

    if (.not. zlo_boundary_type == "") &
         bcz_lo = bc_string_to_integer(trim(zlo_boundary_type))

    if (.not. zhi_boundary_type == "") &
         bcz_hi = bc_string_to_integer(trim(zhi_boundary_type))
    
    if (bcx_lo == UNDEFINED) call bl_error("xlo_boundary_type invalid")
    if (bcx_hi == UNDEFINED) call bl_error("xhi_boundary_type invalid")
    if (bcy_lo == UNDEFINED) call bl_error("ylo_boundary_type invalid")
    if (bcy_hi == UNDEFINED) call bl_error("yhi_boundary_type invalid")
    if (bcz_lo == UNDEFINED) call bl_error("zlo_boundary_type invalid")
    if (bcz_hi == UNDEFINED) call bl_error("zhi_boundary_type invalid")


    ! initialize pmask
    allocate(pmask(dm_in))
    pmask = .FALSE.
    if (bcx_lo .eq. -1 .and. bcx_hi .eq. -1) pmask(1) = .true.
    if (dm_in > 1) then
       if (bcy_lo .eq. -1 .and. bcy_hi .eq. -1) pmask(2) = .true.
    end if
    if (dm_in > 2) then
       if (bcz_lo .eq. -1 .and. bcz_hi .eq. -1) pmask(3) = .true.
    end if

    ! initialize prob_lo and prob_hi
    allocate(prob_lo(dm_in))
    prob_lo(1) = prob_lo_x
    if (dm_in > 1) prob_lo(2) = prob_lo_y
    if (dm_in > 2) prob_lo(3) = prob_lo_z
    allocate(prob_hi(dm_in))
    prob_hi(1) = prob_hi_x
    if (dm_in > 1) prob_hi(2) = prob_hi_y
    if (dm_in > 2) prob_hi(3) = prob_hi_z


    call cluster_set_minwidth(minwidth)
    call cluster_set_blocking_factor(blocking_factor)
    call cluster_set_min_eff(min_eff)

    if (do_alltoallv) call multifab_set_alltoallv(.true.)
    
    call knapsack_set_verbose(the_knapsack_verbosity)

    call layout_set_verbosity(the_layout_verbosity)
    call layout_set_copyassoc_max(the_copy_cache_max)
    call layout_set_sfc_threshold(the_sfc_threshold)

    call destroy(bpt)
    
  end subroutine runtime_init

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine runtime_close()

    use probin_module

    deallocate(nodal)
    deallocate(pmask)
    deallocate(prob_lo)
    deallocate(prob_hi)

  end subroutine runtime_close

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

  subroutine runtime_pretty_print(unit)

    use bl_constants_module
    use pred_parameters
    use bc_module
    use probin_module
    use extern_probin_module

    integer, intent(in) :: unit

    write (unit, *) "defaults shown in []"

    @@printing@@

  end subroutine runtime_pretty_print

end module runtime_init_module
