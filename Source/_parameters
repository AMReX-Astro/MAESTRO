# This file contains the runtime parameters for all MAESTRO problems.  It
# is parsed by write_probin.py and merged with probin.template to produce
# the probin.f90 at compile time.
#
# problem-specific runtime parameters should be defined in a _parameters
# file in the problem directory.


#-----------------------------------------------------------------------------
# category: general MAESTRO
#-----------------------------------------------------------------------------

# General verbosity
verbose                             integer            0

# Verbosity of the knapscak processor-to-grid algorithm.
the_knapsack_verbosity              logical            .false.

# job name printed in output
job_name                            character          ""

# Call a parallel\_barrier before each of the simple timers we have coded
# in advance.f90.  Might cause a very slight overall performance hit.
barrier_timers                      logical            .false.


#-----------------------------------------------------------------------------
# category: problem initialization
#-----------------------------------------------------------------------------

# input model file
model_file                          character          "model.hse"

# Turn on a perturbation in the initial data.  Problem specific.
perturb_model                       logical            .false.

# print out HSE diagnostics as a function of r for the initial model
print_init_hse_diag                 logical            .false.


#-----------------------------------------------------------------------------
# category: timestepping
#-----------------------------------------------------------------------------

# simulation stop time
stop_time                           real               -1.d0

# Maximum number of steps in the simulation.
max_step                            integer            1

# CFL factor to use in the computation of the advection timestep constraint
cflfac                              real               0.5d0

# the multiplicative factor ($\le 1$) to reduce the initial timestep as
# computed by the various timestep estimators
init_shrink                         real               1.d0

# the minimum allowed timestep -- we abort if dt drops below this value
small_dt                            real               1.d-10

# The maximum scale factor that the time step is allowed to grow by per
# time step.
max_dt_growth                       real               1.1d0

# This is the maximum dt that is allowed
max_dt                              real               1.0d33

# Fix the time step.  If -1.0, then use the standard time step.
fixed_dt                            real               -1.0d0

# If $T_{max}^n > T_{max}^{n-1}$
# set the new dt =
#   min[dt, dt*{\tt nuclear\_dt\_fac}*( $T_{max}^{n-1}$ / $(T_{max}^n-T_{max}^{n-1})$ ) ]
# for example, {\tt nuclear\_dt\_fac} = 0.01 means don't let the max temp grow more
# than approximately 1 percent
# not checkpoint-compatible yet since it wouldn't be backwards compatible
nuclear_dt_fac                      real               -1.0d0

# Use the soundspeed constraint when computing the first time step.
use_soundspeed_firstdt              logical            .false.

# Use the divu constraint when computing the first time step.
use_divu_firstdt                    logical            .false.


#-----------------------------------------------------------------------------
# category: grid
#-----------------------------------------------------------------------------

# physical coordinates of lo-x corner of problem domain
prob_lo_x                           real               ZERO

# physical coordinates of lo-y corner of problem domain
prob_lo_y                           real               ZERO

# physical coordinates of lo-z corner of problem domain
prob_lo_z                           real               ZERO

# physical coordinates of hi-x corner of problem domain
prob_hi_x                           real               1.d0

# physical coordinates of hi-y corner of problem domain
prob_hi_y                           real               1.d0

# physical coordinates of hi-z corner of problem domain
prob_hi_z                           real               1.d0

# Fixed grid file.
test_set                            character          ''

# $-x$ boundary condition
bcx_lo                              integer            SLIP_WALL

# $+x$ boundary condition (valid values are listed in {\tt  boxlib/bc.f90})
bcx_hi                              integer            SLIP_WALL

# $-y$ boundary condition
bcy_lo                              integer            SLIP_WALL

# $+y$ boundary condition
bcy_hi                              integer            SLIP_WALL

# $-z$ boundary condition
bcz_lo                              integer            SLIP_WALL

# $+z$ boundary condition
bcz_hi                              integer            SLIP_WALL

# $-x$ boundary condition name---if this is set, it overrides the integer
# value set through {\tt bcx\_lo}
xlo_boundary_type                   character          ""

# $+x$ boundary condition name---if this is set, it overrides the integer
# value set through {\tt bcx\_hi}
xhi_boundary_type                   character          ""

# $-y$ boundary condition name---if this is set, it overrides the integer
# value set through {\tt bcy\_lo}
ylo_boundary_type                   character          ""

# $+y$ boundary condition name---if this is set, it overrides the integer
# value set through {\tt bcy\_hi}
yhi_boundary_type                   character          ""

# $-z$ boundary condition name---if this is set, it overrides the integer
# value set through {\tt bcz\_lo}
zlo_boundary_type                   character          ""

# $+z$ boundary condition name---if this is set, it overrides the integer
# value set through {\tt bcz\_hi}
zhi_boundary_type                   character          ""

# Set to 1 if you are doing a spherical problem.
spherical_in                        integer            0

# set octant = T if you just want to model an octant of a sphere
# (note: only takes effect for spherical geometry)
octant                              logical            .false.

# Set to 1 if using the 2D simplified (planar) model of an octant.
do_2d_planar_octant                 integer            0

# dimensionality (valid values are 2 or 3)
dm_in                               integer            2

# Total number of levels.  1 = single level.
max_levs                            integer            1

# The largest grid size that will be created using make\_new\_grids.
max_grid_size                       integer            64

# The largest grid size that will be created using make\_new\_grids for the
# coarsest level.  Defaults to {\tt max\_grid\_size}.
max_grid_size_1                     integer            -1

# The largest grid size that will be created using make\_new\_grids for
# level 2 (the first refined level).  Defaults to {\tt max\_grid\_size}.
max_grid_size_2                     integer            -1

# The largest grid size that will be created using make\_new\_grids for
# level 3 (the second refined level) and beyond.  Defaults to {\tt max\_grid\_size}.
max_grid_size_3                     integer            -1

# Change the max grid size on the base level on restart
change_max_grid_size_1              logical            .false.

# How often we regrid.
regrid_int                          integer            -1

# the number of buffer zones surrounding a cell tagged for refinement.
# note that this needs to be >= regrid\_int
amr_buf_width                       integer            -1

# Refinement ratio for multilevel problems
ref_ratio                           integer            2

# Number of cells for the base level in the x-direction
n_cellx                             integer            -1

# Number of cells for the base level in the y-direction
n_celly                             integer            -1

# Number of cells for the base level in the z-direction
n_cellz                             integer            -1

# ratio of radial base state zones to Cartesian full state zones for
# spherical geometry
drdxfac                             integer            1

# When assigning processors for grids, this determines whether we use
# the sfc algorithm or knapsack algorithm.  If the total number of grids
# divided by the number of processors is greater than this number, use sfc.
the_sfc_threshold                   integer            5

the_layout_verbosity                integer            0

# This prarmeter has no impact on single-level runs!
#
# 0: This uses either knapsack or sfc on each level.  Before boxes are
#    distributed, MPI ranks are sorted according to the memory usage by
#    all levels.  This is our traditional approach.
# 1: This uses sfc on each level.  MPI ranks are sorted according to the
#    memory usage by lower levels.
the_ml_layout_strategy              integer            0

#  Number of boxassoc layouts we keep in memory to avoid having to
# recompute the boxassoc, which is computationally expensive.
the_copy_cache_max                  integer            128

# The minimum size on a side for a grid created using make\_new\_grids.
minwidth                            integer            8

# grids must be an integer multiple of this number, if possible
blocking_factor                     integer            8

# parameter for cluster algorithm for making new grids in adaptive problems
min_eff                             real               0.9d0

# dump out a file, named grids.out, containing the number of grids a each level.
# A new line is added each time regrid is called.
dump_grid_file                      logical            .false.

# pass $T'$ into the tagging routines as the auxillary multifab instead
# of the default $\rho H_\mathrm{nuc}$.
use_tpert_in_tagging                logical            .false.

#-----------------------------------------------------------------------------
# category: output
#-----------------------------------------------------------------------------

# plot interval
plot_int                            integer            0

# rather than use a plot interval, plot a file after the solution has
# advanced past plot\_deltat in time
plot_deltat                         real               -1.d0

# Number of timesteps between writing a checkpoint file
chk_int                             integer            0

# Turn on storing of enthalpy-based quantities in the plotfile
# when we are running with {\tt use\_tfromp}
plot_h_with_use_tfromp              logical            .true.

# plot species and omegadot in plotfile
plot_spec                           logical            .true.

# plot omegadot in plotfile
plot_omegadot                       logical            .true.

# plot external heating (Hext) in plotfile
plot_Hext                           logical            .false.

# plot nuclear energy generation rate (Hnuc) in plotfile
plot_Hnuc                           logical            .true.

# plot $\etarho$ in plotfile
plot_eta                            logical            .false.

# plot tracers in plotfile
plot_trac                           logical            .false.

# plot w0\_x, w0\_y, w0\_z, divw0, rho0, rhoh0, h0, and p0 in plotfile
plot_base                           logical            .false.

# plot pi and grad(pi)
plot_gpi                             logical            .true.

# plot soundspeed
plot_cs                              logical            .false.

# prefix to use in plotfile file names
plot_base_name                      character          "plt"

# prefix to use in checkpoint file names
check_base_name                     character          "chk"

# If lUsingNFiles = .true., use this many processors to write checkpoint
# and plotfiles.  Fortran has the unfortunate feature of each processor
# only being able to write out 1-2GB each without crashing.
nOutFiles                           integer            64

# If .true., use nOutFiles processors to write checkpoint and plotfiles.
# Fortran has the unfortunate feature of each processor only being able
# to write out 1-2GB each without crashing.
lUsingNFiles                        logical            .true.

# store the state data in single precision
single_prec_plotfiles               logical            .false.

# number of timesteps to buffer diagnostic output information before writing
# (note: not implemented for all problems)
diag_buf_size                       integer            10

# plot the adiabatic excess
plot_ad_excess                      logical            .false.

# create a field in the plotfile storing the processor number for each zone
plot_processors                     logical            .false.

# plot pi * div(U) -- this is a measure of conservation of energy
plot_pidivu                         logical            .false.


# names of specific variables to store in the mini plotfile
mini_plot_var1                      character          ""
mini_plot_var2                      character          ""
mini_plot_var3                      character          ""
mini_plot_var4                      character          ""
mini_plot_var5                      character          ""
mini_plot_var6                      character          ""
mini_plot_var7                      character          ""
mini_plot_var8                      character          ""
mini_plot_var9                      character          ""

# mini plot interval
mini_plot_int                            integer            -1

# rather than use a mini plot interval, output a mini plotfile every
# mini\_plot\_deltat in time
mini_plot_deltat                         real               -1.d0

# basename for the mini plotfiles
mini_plot_base_name                      character          "miniplt"

#-----------------------------------------------------------------------------
# category: algorithm initialization
#-----------------------------------------------------------------------------

# Number of initial pressure iterations.
init_iter                           integer            4

# Number of initial divu iterations.
init_divu_iter                      integer            4

# which file to restart from.  -1 means do not restart
restart                             integer            -1

# restart and add a level of refinement
restart_into_finer                  logical            .false.

# Do the initial projection.
do_initial_projection               logical            .true.


#-----------------------------------------------------------------------------
# category: linear solvers
#-----------------------------------------------------------------------------

# Verbsoity of the multigrid solver, but not the bottom solver.
mg_verbose                          integer            0

# Verbosity of bottom solver
cg_verbose                          integer            0

# Type of cycle used in the MAC multigrid -- 1 = F-cycle, 2 = W-cycle, 3 = V-cycle
mg_cycle_type                       integer            3

# Type of cycle used in the nodal multigrid -- 1 = F-cycle, 2 = W-cycle, 3 = V-cycle
hg_cycle_type                       integer            3

# valid values are $\ge$ 0
hg_bottom_solver                    integer            -1

# valid values are $\ge$ 0
mg_bottom_solver                    integer            -1

# if mg\_bottom\_solver == 4, then how many mg levels can the bottom solver mgt object have
max_mg_bottom_nlevels               integer            1000

# number of smoothing iterations to do after the multigrid bottom solver
mg_bottom_nu                        integer            10

# number of smoothing iterations to do going down the V-cycle
mg_nu_1                             integer            2

# number of smoothing iterations to do going up the V-cycle
mg_nu_2                             integer            2

# In hgproject, in 2D, use a 9 point Laplacian (.true.) or 5-point
# Laplacian (.false.).  In 3D, use a 27 point Laplacian (.true.) or
# 7-point Laplacian (.false.).
hg_dense_stencil                    logical            .true.

# use the hypre library
use_hypre                           logical            .false.


#-----------------------------------------------------------------------------
# category: hydrodynamics
#-----------------------------------------------------------------------------

# Use sponging.
do_sponge                           logical            .false.

# Parameter for sponge.  Problem dependent.
sponge_kappa                        real               10.d0

# Center of the inner sponge.
sponge_center_density               real               3.d6

# The sponge begins at sponge\_center\_density * sponge\_start\_factor.
sponge_start_factor                 real               3.333d0

# plot fdamp rather than sponge
# assumes sponge has the form 1/(1+dt*{\tt sponge\_kappa}*fdamp)
plot_sponge_fdamp                   logical            .false.


# The density below which we modify the constraint to look like
# the anelastic constraint, instead of the low Mach constraint.  This
# prevents velocities from getting out of hand at the edge of the star.
# Refer to Section \ref{Sec:Anelastic Cutoff}.
anelastic_cutoff                    real               3.d6

# The density below which we keep the initial model constant.
# Refer to Section \ref{Sec:Base Cutoff Density}
base_cutoff_density                 real               3.d6

# The multiplicative factor (over base\_cutoff\_density) below which we
# do zero out the buoyancy term in the momentum equation.
buoyancy_cutoff_factor              real               5.0

# factor in front of the volume discrepancy term (0.0 = off)
dpdt_factor                         real               0.d0

# are we doing 1/r$^2$ gravity for plane-parallel
do_planar_invsq_grav                logical            .false.

# the point mass for planar 1/r$^2$ gravity
planar_invsq_mass                   real               0.d0

# turn on (.true.) or off (.false.) basestate evolution
evolve_base_state                   logical            .true.

# if true, don't call average to reset the base state at all, even during
# initialization
fix_base_state                      logical            .false.

# force $\rho_0 = (\rho h)_0 = 0$, {\tt evolve\_base\_state = F}
# and {\tt beta\_type} = 3
do_smallscale                       logical            .false.

# After the advective enthalpy update, recompute the enthalpy if we are
# below the base cutoff density.
do_eos_h_above_cutoff               logical            .true.

# predict\_rhoh = 0; @@
# predict\_rhohprime = 1; @@
# predict\_h = 2; @@
# predict\_T\_then\_rhohprime = 3; @@
# predict\_T\_then\_h = 4; @@
# predict\_hprime = 5; @@
# predict\_Tprime\_then\_h = 6.
enthalpy_pred_type                  integer            predict_rhohprime

# Which quantities do we predict to the edges for computing the ($\rho X$)
# edge states?  @@
# {\tt species\_pred\_type} = 1 means predict $\rho^\prime$
# and $X$ separately.  @@
# {\tt species\_pred\_type} = 2 means predict the full ($\rho X$) itself. @@
# {\tt species\_pred\_type} = 3 means predict $\rho$ and $X$ separately.
species_pred_type                   integer            1

# turns on second order correction to delta gamma1 term
use_delta_gamma1_term               logical            .false.

# turn on the etarho term as described in flow chart
use_etarho                          logical            .true.

# order of slopes in piecewise linear Godunov algorithm.  Options are 0, 2, or 4.
slope_order                         integer            4

# the gravitational acceleration (cm~s$^{-2}$) for plane-parallel geometry
grav_const                          real               -1.5d10

# 0 = no ppm (piecewise linear slopes instead) @@
# 1 = 1984 ppm @@
# 2 = Hybrid Sekora/Colella and McCorquodale/Colella 2009/2010 ppm
ppm_type                            integer            1

# 0 = use ppm instead for multi-d integrator @@
# 1 = bilinear
bds_type                            integer            0

# if 1, then perform parabolic reconstruction on the forces used in
# the prediction and trace under the parabola to the interfaces the
# amount that can reach the interface over dt
ppm_trace_forces                    integer            0


# what type of coefficient to use inside the velocity divergence constraint. @@
# {\tt beta\_type} = 1 uses $\beta_0$; @@
# {\tt beta\_type} = 2 uses $\rho_0$ (anelastic); @@
# {\tt beta\_type} = 3 uses 1 (small-scale combustion).
beta_type                           integer            1

# how to represent gravity in the $\beta_0$ integration:
# .true. = piecewise linear
# .false. = piecewise constant
use_linear_grav_in_beta             logical            .false.

# rotational frequency used for computing centrifugal term in rotation problems.
rotational_frequency                real               ZERO

# latitude, in radians, for problems with rotation where the domain is
# only a subset of a full star.
co_latitude                         real               ZERO

# radius used for computing centrifugal term in rotation problems
rotation_radius                     real               1.0d6

# maximum mach number before the code aborts
mach_max_abort                      real               -1.d0

# freeze the temperature used in the reaction network to the initial
# value.  This is useful for developing an initial convective field
# to carry away the energy, while preventing the reactions from going
# nonlinear.
drive_initial_convection            logical            .false.

# timestep beyond which we set {\tt drive\_initial\_convection} = F
stop_initial_convection            integer              -1

# restart the simulation using a result from a {\tt drive\_initial\_convection} = T run
# note that this uses the restart variable to specify which file to restart
# from.  After reading in the velocity information from the restart file, the
# time and timestep number are zeroed.
restart_with_vel_field              logical            .false.


# modify the momentum equation to have $(\beta_0/\rho) \nabla (\pi/\beta_0)$
# instead of just $(1/\rho) \nabla (\pi)$
use_alt_energy_fix                  logical            .true.


#-----------------------------------------------------------------------------
# category: thermal diffusion
#-----------------------------------------------------------------------------

# Use thermal diffusion.
use_thermal_diffusion               logical            .false.

# How to compute the explicit thermal diffusion term.  @@
# 1 = in terms of $T$; @@
# 2 = in terms of $\rho,p_0,X$.
temp_diffusion_formulation          integer            2

# In the thermal diffusion solver, 1 = Crank-Nicholson; 2 = Backward Euler.
thermal_diffusion_type              integer            1

# the constant conductivity (only applies if the conductivity/constant
# module is used)
conductivity_constant               real               1.0d0

# apply the conductivity limiting---if T, then we set the thermal coefficients
# all to 0 for $\rho <$ {\tt buoyancy\_cutoff\_factor} * {\tt base\_cutoff\_density}
limit_conductivity                  logical            .false.



#-----------------------------------------------------------------------------
# category: burning
#-----------------------------------------------------------------------------

# turn on (.true.) or off (.false.) burning
do_burning                          logical            .true.

# Name of the species to be used in burner threshold
burner_threshold_species            character          ""

# Mass fraction cutoff for burner\_threshold\_species  used in burner threshold
burner_threshold_cutoff             real               1.d-10

# break a zone into subzones, call the burner in each subzone and
# then average the result to the original cell
do_subgrid_burning                  logical            .false.

# mass fraction sum tolerance (if they don't sum to 1 within this tolerance,
# we abort)
reaction_sum_tol                    real               1.d-10

#-----------------------------------------------------------------------------
# category: EOS
#-----------------------------------------------------------------------------

small_temp                          real               5.d6

small_dens                          real               1.d-5

# cutoff for species mass fractions
small_x                              real               0.0

# When updating temperature, use $T=T(\rho,p_0,X) $ rather than
# $T=T(\rho,h,X)$.
use_tfromp                          logical            .false.

# In deriving the temperature from the $h$, first subtract off
# $p_0/\rho$ to define $e$, and use that as the input to the EOS.
use_eos_e_instead_of_h              logical            .false.

use_pprime_in_tfromp                 logical            .false.


#-----------------------------------------------------------------------------
# category: base state mapping
#-----------------------------------------------------------------------------

# The interpolation for filling a cell-centered multifab from a 1D bin-centered array. @@
# 1 = piecewise constant; @@
# 2 = piecewise linear; @@
# 3 = quadratic
s0_interp_type                      integer            3

# The interpolation for filling a cell-centered multifab from a 1D edge-centered array. @@
# 1 = piecewise constant; @@
# 2 = piecewise linear; @@
# 3 = quadratic
w0_interp_type                      integer            2

# The interpolation for filling an edge based multifab from a 1D bin-centered array. @@
# 1 = Interpolate s0 to cell centers (with s0\_interp\_type), then average to edges; @@
# 2 = Interpolate s0 to edges directly using linear interpolation; @@
# 3 = Interpolate s0 to edges directly using quadratic interpolation.
s0mac_interp_type                   integer            1

# The interpolation for putting w0 on edges.  We only compute the normal component. @@
# 1 = Interpolate w0 to cell centers (with w0\_interp\_type), then average to edges; @@
# 2 = Interpolate w0 to edges directly using linear interpolation; @@
# 3 = Interpolate w0 to edges directly using quadratic interpolation; @@
# 4 = Interpolate w0 to nodes using linear interpolation, then average to edges.
w0mac_interp_type                   integer            1


#-----------------------------------------------------------------------------
# category: particles
#-----------------------------------------------------------------------------

# call the particle initialization, advection, etc. routines.
use_particles                       logical            .false.

# store the velocity of the particle?
store_particle_vels                 logical            .false.


#-----------------------------------------------------------------------------
# category: heating
#-----------------------------------------------------------------------------

# use analytic heating
do_heating                          logical            .false.


#-----------------------------------------------------------------------------
# category: SDC
#-----------------------------------------------------------------------------

# how many SDC iteractions to take (requires the code be compiled with
# {\tt SDC := t}
sdc_iters                           integer            1

# recompute MAC velocity at the beginning of each SDC iter
sdc_couple_mac_velocity             logical            .false.
