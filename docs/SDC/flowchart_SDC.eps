%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: flowchart_SDC.pdf
%%Creator: Adobe Acrobat 9.5.1
%%For: zingale
%%CreationDate: 07/30/2012, 01:31:12 PM
%%BoundingBox: 0 0 684 738
%%HiResBoundingBox: 0 0 684 738
%%CropBox: 0 0 684 738
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (hp LaserJet 1320 series) (3010.000) 550
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq{pop}{setblackgeneration}ifelse
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq{pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 619 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-13:18:53        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreateDate="2012-07-30T13:30:14-04:00"
   xmp:CreatorTool="Draw"
   pdf:Producer="LibreOffice 3.5">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Michael Zingale</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (1)]
[/TrimBox [0 0 684 738]]
[/BleedBox [0 0 684 738]]
[/ArtBox [0 0 684 738 ]]
]xpdfm
Adobe_AGM_Core/ps gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
684.000000 738.000000 1 0.000000 0.000000 
pop pop pop pop pop
%% FoomaticRIPOptionSetting: PageSize=Custom
%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_CoolType_Core/ps get exec
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QWIBAA+TrebuchetMS def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 -209 764 737} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73DB6F19853DC0A2F72FE2AFA46C9E0C0423E8917
730761B720646096D201BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS /QWIBAA+TrebuchetMS findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GXABAA+TrebuchetMS-Italic def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-68 -209 796 875} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7A73DB6F19853DC0A2F72FE2AFA46C9E0C0423E8917
730761B720646096D201BC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic /GXABAA+TrebuchetMS-Italic findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: YCFBAA+DejaVuSans-Oblique Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YCFBAA+DejaVuSans-Oblique def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-284 -177 550 800} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B7C3C9ED9313AFF691AF9DEA7EFE9F59246D6675CBE2
23F5D9796E7E2CD60A70D0> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OGZVUX+DejaVuSans-Oblique /YCFBAA+DejaVuSans-Oblique findfont ct_VMDictPut
true set_gvm
%ADOBeginSubsetFont: JGLAAA+OpenSymbol Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /JGLAAA+OpenSymbol def
/FontInfo 6 dict dup begin
/ItalicAngle 0 def
/OrigFontType /TrueType def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {0 -201 500 687} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B72E922B867FB63D2E8287E8967217F388CA847E158D
39F13AB4A7BCA39DF2> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OGZVUY+OpenSymbol /JGLAAA+OpenSymbol findfont ct_VMDictPut
Adobe_CoolType_Core/pt get exec
%%EndPageSetup
1 -1 scale 0 currentpagedevice/PageSize get 1  get neg translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 738 li
684 738 li
684 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 738 mo
684 738 li
684 0 li
0 0 li
cp
eclp
0 0 mo
684 0 li
684 738 li
0 738 li
0 0 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
ef
491.4 550.8 mo
327.6 550.8 li
327.6 187.2 li
655.2 187.2 li
655.2 550.8 li
491.4 550.8 li
cp
.0849622 .0656443 .0656443 0 cmyk
ef
1.4 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
492.8 550.8 mo
491.4 550.8 li
485.7 550.8 li
.598749 .514733 .509422 .206455 cmyk
@
479.9 550.8 mo
474.2 550.8 li
@
468.4 550.8 mo
462.6 550.8 li
@
456.9 550.8 mo
451.1 550.8 li
@
445.4 550.8 mo
439.6 550.8 li
@
433.9 550.8 mo
428.1 550.8 li
@
422.4 550.8 mo
416.6 550.8 li
@
410.9 550.8 mo
405.1 550.8 li
@
399.3 550.8 mo
393.6 550.8 li
@
387.8 550.8 mo
382.1 550.8 li
@
376.3 550.8 mo
370.6 550.8 li
@
364.8 550.8 mo
359.1 550.8 li
@
353.3 550.8 mo
347.6 550.8 li
@
341.8 550.8 mo
336 550.8 li
@
330.3 550.8 mo
327.6 550.8 li
327.6 547.7 li
@
327.6 542 mo
327.6 536.2 li
@
327.6 530.5 mo
327.6 524.7 li
@
327.6 519 mo
327.6 513.2 li
@
327.6 507.5 mo
327.6 501.7 li
@
327.6 495.9 mo
327.6 490.2 li
@
327.6 484.4 mo
327.6 478.7 li
@
327.6 472.9 mo
327.6 467.2 li
@
327.6 461.4 mo
327.6 455.7 li
@
327.6 449.9 mo
327.6 444.2 li
@
327.6 438.4 mo
327.6 432.7 li
@
327.6 426.9 mo
327.6 421.1 li
@
327.6 415.4 mo
327.6 409.6 li
@
327.6 403.9 mo
327.6 398.1 li
@
327.6 392.4 mo
327.6 386.6 li
@
327.6 380.9 mo
327.6 375.1 li
@
327.6 369.4 mo
327.6 363.6 li
@
327.6 357.8 mo
327.6 352.1 li
@
327.6 346.3 mo
327.6 340.6 li
@
327.6 334.8 mo
327.6 329.1 li
@
327.6 323.3 mo
327.6 317.6 li
@
327.6 311.8 mo
327.6 306.1 li
@
327.6 300.3 mo
327.6 294.5 li
@
327.6 288.8 mo
327.6 283 li
@
327.6 277.3 mo
327.6 271.5 li
@
327.6 265.8 mo
327.6 260 li
@
327.6 254.3 mo
327.6 248.5 li
@
327.6 242.8 mo
327.6 237 li
@
327.6 231.3 mo
327.6 225.5 li
@
327.6 219.7 mo
327.6 214 li
@
327.6 208.2 mo
327.6 202.5 li
@
327.6 196.7 mo
327.6 191 li
@
329.6 187.2 mo
335.4 187.2 li
@
341.1 187.2 mo
346.9 187.2 li
@
352.6 187.2 mo
358.4 187.2 li
@
364.1 187.2 mo
369.9 187.2 li
@
375.6 187.2 mo
381.4 187.2 li
@
387.2 187.2 mo
392.9 187.2 li
@
398.7 187.2 mo
404.4 187.2 li
@
410.2 187.2 mo
415.9 187.2 li
@
421.7 187.2 mo
427.4 187.2 li
@
433.2 187.2 mo
438.9 187.2 li
@
444.7 187.2 mo
450.5 187.2 li
@
456.2 187.2 mo
462 187.2 li
@
467.7 187.2 mo
473.5 187.2 li
@
479.2 187.2 mo
485 187.2 li
@
490.7 187.2 mo
496.5 187.2 li
@
502.2 187.2 mo
508 187.2 li
@
513.8 187.2 mo
519.5 187.2 li
@
525.3 187.2 mo
531 187.2 li
@
536.8 187.2 mo
542.5 187.2 li
@
548.3 187.2 mo
554 187.2 li
@
559.8 187.2 mo
565.5 187.2 li
@
571.3 187.2 mo
577 187.2 li
@
582.8 187.2 mo
588.6 187.2 li
@
594.3 187.2 mo
600.1 187.2 li
@
605.8 187.2 mo
611.6 187.2 li
@
617.3 187.2 mo
623.1 187.2 li
@
628.8 187.2 mo
634.6 187.2 li
@
640.3 187.2 mo
646.1 187.2 li
@
651.9 187.2 mo
655.2 187.2 li
655.2 189.6 li
@
655.2 195.4 mo
655.2 201.1 li
@
655.2 206.9 mo
655.2 212.6 li
@
655.2 218.4 mo
655.2 224.1 li
@
655.2 229.9 mo
655.2 235.6 li
@
655.2 241.4 mo
655.2 247.2 li
@
655.2 252.9 mo
655.2 258.7 li
@
655.2 264.4 mo
655.2 270.2 li
@
655.2 275.9 mo
655.2 281.7 li
@
655.2 287.4 mo
655.2 293.2 li
@
655.2 298.9 mo
655.2 304.7 li
@
655.2 310.5 mo
655.2 316.2 li
@
655.2 322 mo
655.2 327.7 li
@
655.2 333.5 mo
655.2 339.2 li
@
655.2 345 mo
655.2 350.7 li
@
655.2 356.5 mo
655.2 362.2 li
@
655.2 368 mo
655.2 373.7 li
@
655.2 379.5 mo
655.2 385.3 li
@
655.2 391 mo
655.2 396.8 li
@
655.2 402.5 mo
655.2 408.3 li
@
655.2 414 mo
655.2 419.8 li
@
655.2 425.5 mo
655.2 431.3 li
@
655.2 437 mo
655.2 442.8 li
@
655.2 448.6 mo
655.2 454.3 li
@
655.2 460.1 mo
655.2 465.8 li
@
655.2 471.6 mo
655.2 477.3 li
@
655.2 483.1 mo
655.2 488.8 li
@
655.2 494.6 mo
655.2 500.3 li
@
655.2 506.1 mo
655.2 511.9 li
@
655.2 517.6 mo
655.2 523.4 li
@
655.2 529.1 mo
655.2 534.9 li
@
655.2 540.6 mo
655.2 546.4 li
@
653.9 550.8 mo
648.1 550.8 li
@
642.4 550.8 mo
636.6 550.8 li
@
630.9 550.8 mo
625.1 550.8 li
@
619.4 550.8 mo
613.6 550.8 li
@
607.9 550.8 mo
602.1 550.8 li
@
596.4 550.8 mo
590.6 550.8 li
@
584.8 550.8 mo
579.1 550.8 li
@
573.3 550.8 mo
567.6 550.8 li
@
561.8 550.8 mo
556.1 550.8 li
@
550.3 550.8 mo
544.6 550.8 li
@
538.8 550.8 mo
533.1 550.8 li
@
527.3 550.8 mo
521.5 550.8 li
@
515.8 550.8 mo
510 550.8 li
@
504.3 550.8 mo
498.5 550.8 li
@
149.4 556.5 mo
143.7 556.5 li
@
137.9 556.5 mo
132.2 556.5 li
@
126.4 556.5 mo
120.6 556.5 li
@
114.9 556.5 mo
109.1 556.5 li
@
103.4 556.5 mo
97.6 556.5 li
@
91.9 556.5 mo
86.1 556.5 li
@
80.4 556.5 mo
74.6 556.5 li
@
68.9 556.5 mo
63.1 556.5 li
@
57.3 556.5 mo
51.6 556.5 li
@
45.8 556.5 mo
40.1 556.5 li
@
34.3 556.5 mo
28.6 556.5 li
@
22.8 556.5 mo
21.6 556.5 li
21.6 551.9 li
@
21.6 546.2 mo
21.6 540.4 li
@
21.6 534.7 mo
21.6 528.9 li
@
21.6 523.2 mo
21.6 517.4 li
@
21.6 511.7 mo
21.6 505.9 li
@
21.6 500.1 mo
21.6 494.4 li
@
21.6 488.6 mo
21.6 482.9 li
@
21.6 477.1 mo
21.6 471.4 li
@
21.6 465.6 mo
21.6 459.9 li
@
21.6 454.1 mo
21.6 448.4 li
@
21.6 442.6 mo
21.6 436.8 li
@
21.6 431.1 mo
21.6 425.3 li
@
21.6 419.6 mo
21.6 413.8 li
@
21.6 408.1 mo
21.6 402.3 li
@
21.6 396.6 mo
21.6 390.8 li
@
21.6 385.1 mo
21.6 379.3 li
@
21.6 373.5 mo
21.6 367.8 li
@
21.6 362 mo
21.6 356.3 li
@
21.6 350.5 mo
21.6 344.8 li
@
21.6 339 mo
21.6 333.3 li
@
21.6 327.5 mo
21.6 321.8 li
@
21.6 316 mo
21.6 310.3 li
@
21.6 304.5 mo
21.6 298.7 li
@
21.6 293 mo
21.6 287.2 li
@
21.6 281.5 mo
21.6 275.7 li
@
21.6 270 mo
21.6 264.2 li
@
21.6 258.5 mo
21.6 252.7 li
@
21.6 247 mo
21.6 241.2 li
@
21.6 235.4 mo
21.6 229.7 li
@
21.6 223.9 mo
21.6 218.2 li
@
21.6 212.4 mo
21.6 206.7 li
@
21.6 200.9 mo
21.6 195.2 li
@
25.1 192.9 mo
30.8 192.9 li
@
36.6 192.9 mo
42.3 192.9 li
@
48.1 192.9 mo
53.8 192.9 li
@
59.6 192.9 mo
65.4 192.9 li
@
71.1 192.9 mo
76.9 192.9 li
@
82.6 192.9 mo
88.4 192.9 li
@
94.1 192.9 mo
99.9 192.9 li
@
105.6 192.9 mo
111.4 192.9 li
@
117.2 192.9 mo
122.9 192.9 li
@
128.7 192.9 mo
134.4 192.9 li
@
140.2 192.9 mo
145.9 192.9 li
@
151.7 192.9 mo
157.4 192.9 li
@
163.2 192.9 mo
168.9 192.9 li
@
174.7 192.9 mo
180.5 192.9 li
@
186.2 192.9 mo
192 192.9 li
@
197.7 192.9 mo
203.5 192.9 li
@
209.2 192.9 mo
215 192.9 li
@
220.7 192.9 mo
226.5 192.9 li
@
232.2 192.9 mo
238 192.9 li
@
243.8 192.9 mo
249.5 192.9 li
@
255.3 192.9 mo
261 192.9 li
@
266.8 192.9 mo
272.5 192.9 li
@
277.2 193.9 mo
277.2 199.7 li
@
277.2 205.5 mo
277.2 211.2 li
@
277.2 217 mo
277.2 222.7 li
@
277.2 228.5 mo
277.2 234.2 li
@
277.2 240 mo
277.2 245.7 li
@
277.2 251.5 mo
277.2 257.2 li
@
277.2 263 mo
277.2 268.8 li
@
277.2 274.5 mo
277.2 280.3 li
@
277.2 286 mo
277.2 291.8 li
@
277.2 297.5 mo
277.2 303.3 li
@
277.2 309 mo
277.2 314.8 li
@
277.2 320.5 mo
277.2 326.3 li
@
277.2 332.1 mo
277.2 337.8 li
@
277.2 343.6 mo
277.2 349.3 li
@
277.2 355.1 mo
277.2 360.8 li
@
277.2 366.6 mo
277.2 372.3 li
@
277.2 378.1 mo
277.2 383.8 li
@
277.2 389.6 mo
277.2 395.3 li
@
277.2 401.1 mo
277.2 406.9 li
@
277.2 412.6 mo
277.2 418.4 li
@
277.2 424.1 mo
277.2 429.9 li
@
277.2 435.6 mo
277.2 441.4 li
@
277.2 447.1 mo
277.2 452.9 li
@
277.2 458.6 mo
277.2 464.4 li
@
277.2 470.2 mo
277.2 475.9 li
@
277.2 481.7 mo
277.2 487.4 li
@
277.2 493.2 mo
277.2 498.9 li
@
277.2 504.7 mo
277.2 510.4 li
@
277.2 516.2 mo
277.2 521.9 li
@
277.2 527.7 mo
277.2 533.5 li
@
277.2 539.2 mo
277.2 545 li
@
277.2 550.7 mo
277.2 556.5 li
@
271.5 556.5 mo
265.7 556.5 li
@
260 556.5 mo
254.2 556.5 li
@
248.5 556.5 mo
242.7 556.5 li
@
236.9 556.5 mo
231.2 556.5 li
@
225.4 556.5 mo
219.7 556.5 li
@
213.9 556.5 mo
208.2 556.5 li
@
202.4 556.5 mo
196.7 556.5 li
@
190.9 556.5 mo
185.2 556.5 li
@
179.4 556.5 mo
173.7 556.5 li
@
167.9 556.5 mo
162.1 556.5 li
@
156.4 556.5 mo
150.6 556.5 li
@
149.4 90 mo
32.4 90 li
32.4 25.2 li
266.4 25.2 li
266.4 90 li
149.4 90 li
cp
.196414 .15378 .15378 0 cmyk
ef
0 lw
1 lj
149.4 90 mo
32.4 90 li
32.4 25.2 li
266.4 25.2 li
266.4 90 li
149.4 90 li
cp
.750179 .679652 .670191 .901488 cmyk
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1 <1C60D8A8C9B75A17CFD5CB6A7DFBF586A82C5331F9BB739082DE392F265
F35B8F22B18D22876902C40ED2D0CA4193395EB2E202B88139FDBBAE3AF41759
1E1855EEE90EB66088CAF614ADEF7752CA0CD8B687F5696F3EC24A78B2AC5FE4
CA74522863D7693A9098AAB62F4DE0D40768ED29CE6128D48E525D1183E3CDFE
BE7D724AC627DD4ACF0B8C10B27CA292237ECF49D199CB3F310362A965D47C3E
71514F479C96C12C1A663D7D430FDED968E87D0856C8A0CE4BB01DA570D> |-
/g2 <1C60D8A8C9B70FAD01BD5C60CC242156307230DB0212F5BB750569F59A5
7A24B639F13732B85F91AFFC419EDF2A897F97C96CE674A20C8711AEBC293D63
6D071E0E81F0425C1472EA2DBD863FDB44A0B0975EB1E84> |-
/g3 <1C60D8A8C9B78E05EAD1DCFAD5980E8717D9E74FAA96E06B209A44E6E12
9FBC4599B3ED1EDCF44433FAA33D229BA22DAA4AE8AB0DF84BC5BF0A504FDDCF
C129580FCF6E4E814C39DB1126D6C7FC34EAEE951A45911ACDD22FEA34DE9E5D
351CDAD21F63FADD9AA474F3BB9D7071110731A49F71FE895AE1446EBD582FFA
70B7CB2C257E10FC58F2271705E5A83AF680574D14513CEEC2B06D385B7EE588
D6FD16E6294> |-
/g4 <1C60D8A8C9B7361F0D8997296CA1AF4AF8CEBB79CA69146FA8AEF107770
C112C3276A8BAA41736BFE32F69BF8764B727214CCFCD974D730167CE02B8E29
E> |-
/g5 <1C60D8A8C9B83FE3A4> |-
/g6 <1C60D8A8C9B78256CC0D7E2AE6FAD79204A35C83A93DC4D8BC158868C2D
5EB148BD0119F1342FBB5CE4875B27346E8341B03EE3E21A3724CF68C190783C
2840330B099FE21AB64965DF14EF2A010C4384515870266A71048ADE68687A43
AA2B86B32BC39CCB54A072918355A85145962D931> |-
/g7 <1C60D8A8C9B7299AB45FFAE21CC397B83168E06330A24920C0B8EA79D80
B0437F671A93647D767640365B4697D97604662787F0DB8F9C6BF31A3A4E3A7B
47BEEA2DE668B44866A0BE077C6A22ADA5EE741D9092D> |-
/g8 <1C60D8A8C9B7F6E95DA1C7267678754EAA76E973EB040C4BAF6204DD75C
3B6BE35> |-
/g9 <1C60D8A8C9B84FD8855B30BE510F0A4E6F8209604A4D43AA02916F8B356
EB8DE31F97EB6038B48C9931170E05DE1BCDC4919B851B19083A3BB7AFA7CFE2
5A171EE0A1AEDAFB9C025532173CF3911064004B52C0C7169F6AB70> |-
/g10 <1C60D8A8C9B6B34EFABB0A02ACF217CD5891C920D6C7A18C08A47DCCAF
EC7121A391C0F4F144E68E03D470D155967336DBDF22C19926031CEE03E0ADD8
404E392BBBBEED5D2F64ECD6038DB524223579A9E8D7BF40E81B01C093326924
B22413F45CD4375AA292AA1B4E07ABF0929ABCAF88A49C7D5DD4EC6A41DDF7A3
E64F3567> |-
/g11 <1C60D8A8C9B79AB85D84644FFFC8272983A3215B28AAB47BC9C742FE95
7DAC1D4E3D4EF155DDFE6AEB8CEDA860A50DB3D2F0E2597A1A88C1D6E93A28BC
4558D0523020589E0FC2B26A81568C6211B06B83C2A9E20BADE2B56E8264C8D6
DD5CF88A7EE158C62501E37CE525F9BDB50EED6F6963B9EA76A5CBD98B268C18
116159EB2F28BCBA7CE7D222D7F16340> |-
/g12 <1C60D8A8C9B70653182570B07E4F804FFD1D72AD9DC0FB538B02060C41
33DCD00456D773F2262AEAF9DCFB5CDDC27B22CE6DD54B80CDDE9A4EBE4131A8
D250574EE9E430C961196899E049762F0F885640E970C9D2AD0743EE45DF184C
FDB1C5DD4AA23CEF7560009E12E1301FED90AA1F0303C7B0FDDBA4258BB102D1
B508ADA8426B03A9893992F3E8B6B214C5D85AA139C8386CF673B1CB93> |-
/g13 <1C60D8A8C9B7EE7C1993926323343121372FFE68F66C70361555DD8977
5959DF898412B995AD740EF5F09F7F125811F871E480FF94F0734D91DE3E83D6
1F892499E1209338451E92EFA560737345AFA9AD86AB6B80168CCB0A93FDBADA
A6893DF496B9D1049C5D5A4134D58CB1566B556525D6E81BC36152D956F2C81E
DAF15395AC994F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
dup 11 /g11 put
dup 12 /g12 put
dup 13 /g13 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 242{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
39.5 42.8 mo
(\001\002\003\004\002\005\006\007\005\010\011\012\013\014\002\013\015)
[7.19994 5.98494 7.88991 5.88 5.98494 4.49993 8.08493 5.50504 4.30493 8.10002 4.20006 12.48 
8.09998 6.0001 5.98494 8.18997 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1 <1C60D8A8C9B7FA136B61337F101516D8F1604629C0D1ACDA9278316A68A
2B8FB3B1478C90FF3FA93DA709338F41F55ED72C37EFAA2B0B94549F33534831
C61E7DC26F4A89507B1D6FA70726A451BCDD580DE355395C3A4C01758D63B17C
99D1DB92A39682740C70464D1439577F564461893DFEC14A8DBB309123C2BE2B
CDD617443C3BDD5565ABB1CD09FB44E> |-
/g2 <1C60D8A8C9B799EBD2A9828B3E5DA204E8C6D2BEA1056689F8BE37A13FE
2FBB6DCDE922B1313D6C19E627CD1BFB51FF8B1FE6C2AD6473FCAF062BE08121
F41262A6C2DB940D8C2B728ED0959489ABEDCA70688FC20936911098AD4C9A86
53FEB8D20B303> |-
/g3 <1C60D8A8C9B72C0FF10F869E7A030BF09FA9B21B61964557830D3A6862C
82171B1B9F42926B64394BAFD2EF46CF987317D6344CAEA32BE51AC834C10651
1AB0A2C54B6540E5C1663727F086C79680A52> |-
/g4 <1C60D8A8C9B83FE3A4> |-
/g5 <1C60D8A8C9B72C0FF15AB5DF707DA71B5AD5F27B478231E1E11AFD7B110
0CEC06D8AAB8183A0A2A2FDFF3AD3978C9CA4520C25C77A12252857F56EB5C7B
B8EE5A9BCD59595EDCBBBB46CBFA8> |-
/g6 <1C60D8A8C9B7EE7C16D7329E21896282807350A1FAE5F6D227D32A20A56
2D61DC69F246C36EDEF8EEB38E9A507BD2A96C736482193E09FE701B27948721
85F8FF8472A5BB35F8124C317CC897C7F178AB4047FB7BC4C294D6CDE2CFD555
24230550945> |-
/g7 <1C60D8A8C9B72C0FF113BFFE5356378E12E4E63C8ADFBC7C7BA9016F161
C26AFF01A6A959283CB156A409236ABAFCB21E132FDADBC435266270A4FA80E3
88526DC40EC6149E306106698F1> |-
/g8 <1C60D8A8C9B7EE7C161D3F5D05B65BE1636D1EA425AB6D81DD7FD96EDC0
FD2A8D04BC4165FCAF9A147097285E76470E57F672149FC4EE9319D620E1D> |-
/g9 <1C60D8A8C9B7A3FAB28685BB483895D3812B958A40712208F2774C7325A
AD88137CAE5173FD9B3F6A7E9A006B7CD9DCED8562C1C0107B67FD22259F9> |-
/g10 <1C60D8A8C9B7F6E95CB173C8B32485C31A411F5959EAEA5C6BA312095F
C69CD312237AE216EED3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 1 /g1 put
dup 2 /g2 put
dup 3 /g3 put
dup 4 /g4 put
dup 5 /g5 put
dup 6 /g6 put
dup 7 /g7 put
dup 8 /g8 put
dup 9 /g9 put
dup 10 /g10 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 245{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
39.5 57.7 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
46.5 52.6 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
50.3 57.7 mo
(\003\004\005)
[4.40405 3.59994 0 ]xsh
62.8 57.7 mo
(\001\006\007)
[6.89995 6.79208 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
80.9 52.6 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
84.7 57.7 mo
(\003\004\005\001\010)
[4.40405 3.59994 4.48805 6.89996 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
110.9 62.7 mo
(\011)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
114.3 57.7 mo
(\007)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
118.8 52.6 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
122.6 57.7 mo
(\003\004\012)
[4.48805 3.59994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
137.6 52.6 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g11 <1C60D8A8C9B67DB5AEC4482BB62443FC57D1611013576293B330A2FA2D
C115381971516EDAFBCCDABB9FC4754EB2425C91DE88AD8F8A1136C95288DFB4
1932754475A8B3D40A769B411B220BB4C2F08F16261B2E07B9BAF641B17C809F
9752590DD8DED5F2E9C14AF46ECD295CA419024C8C594E86EE4E4DB832A6EBFB
8018F0EE740A7B6934DE1673DE2C5BCD078002E1927AFF7029D680B24D6D38F6
7CB71CAD70F3966A3F0C71C44C13> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 11 /g11 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 244{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
141.4 57.7 mo
(\003\004\013)
[4.48805 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
157.3 52.6 mo
(\002)sh
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g14 <1C60D8A8C9B78E05EA292E4B71D84D05C9BEE79C4040C634DAE4CF2A6A
13C84698DD9DAA6CD558F4F372F4A058> |-
/g15 <1C60D8A8C9B8391507A711BAA886A069D7633AB0F9A391069F746C5595
E519B61AF30BB10E4FE4A4A35A425309D57E2B54CEEF3E399716A7B03D39BEE9
9E3E26932B62BF7FFFECB79A5B3DF56D7FC681C685460D3CC03FCB74CBFB29> |-
/g16 <1C60D8A8C9B7A66FFD859E05CAEF3153E560A7E31E6A7E59376725D0D6
A61C143F711477DB8BC2CD64170D3292BC97346C6B1AA7AE6611824246C464> |-
/g17 <1C60D8A8C9B78256D23FAC3A2DF558C0557C68C84D534405B2E97F4F64
72968EA6C5A43E2EBC5B677D14673E4E1A3836B6618074E41F5D54B2A95723AF
BD52A107199456CE707B120EA753DE31EA91612D66EDD49317202A3DC9AEF6DE
8ABE36D8FC512EDB3F6E49381737BAD657FC5032014D2E7027BF4DAE3C48709D
60364872906EC4D0C37074EB99DBFC1BA03518D29595> |-
/g18 <1C60D8A8C9B7EE7C16D0698B140D90775A9B181C785069DB8015477CAD
CA9E753C0911EA6F8B4FF85FFDC5E21AFEB253B8D14466F19B26338C2A8A728E
4A5DBCFAFFE486EB54F9C5FDA5677C5B2B139CCDBB059F399F1425466D5006D9
DB109ECFA382B8F3AAE0AB4442F747CBDE156A825E1421F89DBBC92D57996942
37CFEC> |-
/g19 <1C60D8A8C9B7EE7C19898F169D73B161A09AD8D8569E70660D90EEA3C2
49CAFE02F21221E0DCACA8CBC8492A010C327C31EDAF1E2DB680D5991EB9FA79
3E760C2AA15EE58B24C5C73C4D16613617090316ED66CB526829D54F554161EA
53F1F692270879EB31CA1A33163558A4E7D0A4C8E31B82B4E375D04FE96D7944
795AF1A8A85E12B597> |-
/g20 <1C60D8A8C9B78E05E50DC73183A2AD600A8513516AF097DF2E11E4C53A
F020424329DB780EF2CC422DF0059EE92F5ECE4E56A99F3E13455026AB2AC21F
8059E388A6FA6E5E11635BC5C283398CB92D3A3BD84E21F8C87F7107AC886FA3
1247E51F4A715290EC97C8BA9E3E8FC593AD783DD371E9D738AB99AC8C774069
089AFC9E35B90A3F0532A8> |-
/g21 <1C60D8A8C9B706531847DAB50AC9B96EDAE99CBEED359967B95AADC79B
03CC370F7FEDD5909EDECCCE4CDE15B758CFF2C9C4A2EB1E2A86917D530A45D7
63D2328B1E51CE5E70CBE62EA5EC37D88526532596EE9A8C3C0376F9AB7DF98D
0103729393975CEAF73025E08032FAFBC9C63A7FCCA5A8BF40E8DE72EA787202
C1A2D6172C8DA863BEE2B84AD6B2884F7F23850A401D16AE98722E23E858B89C
4B11DEBA382E02FAAF751C69E852A4EC> |-
/g22 <1C60D8A8C9B7171E9AB9BDC73320DE078B003C4359F73030BECA89669E
51630E5BFD34C81C2909A83A555BA7D252C1ED71DB1C65563E3CF93F754A4EDF
235759EB7A2C2660C1F8F2DD831D78354B7B235FDBE87D60106D8B430F77FF2A
D09A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 12 /g14 put
dup 13 /g15 put
dup 14 /g16 put
dup 15 /g17 put
dup 16 /g18 put
dup 17 /g19 put
dup 18 /g20 put
dup 19 /g21 put
dup 20 /g22 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 235{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
39.5 75.5 mo
(\014\015\016\017\020\004\021\022\023\017\004\023\024\022\024\017)
[6.20403 3.684 6 6.49203 6.79208 3.59994 6.68408 6.29993 4.80009 6.49203 3.59994 4.80009 
5.00407 6.38393 5.00408 0 ]xsh
149.4 270 mo
32.4 270 li
32.4 205.2 li
266.4 205.2 li
266.4 270 li
149.4 270 li
cp
.750179 .679652 .670191 .901488 cmyk
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g14 <1C60D8A8C9B78FDBC3BF9577F76E651597904D349CF7AC52F08DBCA4C1
8566AD2AC01841337A5768B4B91283D5A3C1E798A83675E4163454FFC8664EC7
CD1AAE1C0428BC5298B16845EC88BCC652B0A03F9F9862924A4B253266EEF90B
B5> |-
/g15 <1C60D8A8C9B7CDD8CD262A9EDFAF5943392CCCE018B94A38CDE53EA55C
3A9C649062E179074E28D00DCA1662DF01BB07BC6CB2F8> |-
/g16 <1C60D8A8C9B72C0FF16992896AE25A1452D053EE61895AC1677DC82993
C16CF049B9BBB156B05389E1D1D1FE6738593F0EEC6E6275CB724D03C702A317
0D1B0EF880AD8F07FEC0> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 14 /g14 put
dup 15 /g15 put
dup 16 /g16 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 239{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
39.5 223.2 mo
(\001\002\013\015\005\016\017\020\005)
[7.19994 5.98494 8.18997 8.20511 4.58992 7.89003 8.88007 5.40007 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g23 <1C60D8A8C9B7C56CB4CC9458A3FABBC4FB7BDB6ACCD10D96CD1ADA169F
7386C96ACEA4F22304C0501DE72887AE3BBF778D3710281B95EA58ADA5CD71DA
D1CD72B0A406017A7ADF3E991E6CA2EB583EE18A4E756E4151BA68F72F38BB55
2AA1224F318421D5> |-
/g24 <1C60D8A8C9B78256C4E4E0C0B8EFD32FA9D64773B9D754248AB8D8D801
9FCF43FD4D9EA7DF9721D85969B29F37E69CD6225B28C99EA670E1B99304C05A
AF108DDCA8ACEDD0F9173E3A699FD9671A3A835DA64F95A682AB44E7A78BF14A
5168BE83CC4F07EC8921C469688CC92D7CA1D122A205A87E5D1D6E2295DA1583
EE> |-
/g25 <1C60D8A8C9B6B34EFA443ED550BD23E183AC2599107132284C1E328144
C8E45048FBFF00916E57A2F4BA9C825D7E9F290616D87643B0845E3B9949060B
78F49EE6793A951ADB77B4A627B7778AF6B9EAC6DA57F1CCFF10F0D3D313C062
80118E95190CBD19B51C8406C4D6661274196DDE1E2CA23E412E327E67ECB947
DB1D04A64D0CCF26622B8FA4C1786B4A0E274144F10BD6316F9A8DE71077E1D6
06256F0BBE7B30> |-
/g26 <1C60D8A8C9B7EE7C19B6D23B89E6E94A9855C779222B8A78E2569E2F70
F66207153E27BF272EEA265F907E1496AE65F32D99A5D4D2159697E3BB66155C
86A0BC900CA8B377D26513305BB05517388CD2E9E68D07BBB1239C9267FFEA06
FFD8DF837BDFCBE4ED30216C9E0EC3B66AB4EB8B06E0DD955D7ABD8EF38423B3
70A35D9A39A09EA431B92C42DE0E504BA8B9FDFF5EED4C5396BDFF474360F1FB
78378ACC093E0EBB> |-
/g27 <1C60D8A8C9B7EE7C19F37F944D071E735FBF9560EA1D2F60374ACC9FEE
FA91C78D818A058401580592B6CF516F8B7D61ED296A8B2A8A1FACF5E0BC1187
A56BD6BF32E4C6BC7B7C8DE81055520A6D2864D90B61C7785212CAF0DDB3F8> |-
/g28 <1C60D8A8C9B7D8BE1941ADA83382915793613C974E66D2674C11D2F15E
D9D3638980F1B7121F4B221617C199DA8EC4B5663841AA> |-
/g29 <1C60D8A8C9B78FDBE7608A58C05729179D972D5E840A2A1787F3F33D32
7875C7BF392EBFABEC842F58A88A37DE43A5151334AB7188FBDE626792CE40D2
A79CBA44AC6497D7B953A0D5EDAAC4A411E03CF25FC3FBF4F7C000BC27147B40
488E98AF059721C69AE00E12F2C14B2083> |-
/g30 <1C60D8A8C9B7A59EA796FFFC4D1A55DCB2BA7EB7EFC58A30390F06FF89
468652849D35A6D2B268A716043A195D2980C026185678D38E4C560FEA42917F
57A9CACC3E8653019919419674BB5582F069248712FF7D4493C2EBC1FC3EBD25
DB87BFFED7D21F31042450CD9B8D44A4942BB7A73FA7F601A54268FC53390277
E14EB17B51B790823718E8776D169E11E9C5F3BF80CA9E042D29ADE45E8C0FEC
55DD3B393E501FDA59FC8E739589D04033998795F1F64DA15DA62F5E24ABA743
6FDD0AF5ED1B5A027A10A76819DD6C587F2FC66081F8B1FA1A0E5A0437FD980F
8891287984949D9D87DB4EF934BF6608A70F94A75A> |-
/g31 <1C60D8A8C9B82A0D86D0CD94C2A721A69C65EDF6F1D907438451EF7F15
940BC81506A8043F51EA7E0CBABBE1A0CCD9338E527C7B> |-
/g32 <1C60D8A8C9B854D0F42E1FA4FD9C49109BF5BFFDF73D4B8AD1> |-
/g33 <1C60D8A8C9B72C0FF1E706C497AB7EAE42F2BBF448CA51DB69C3774FC4
36801CF368438684A6904DB4367B409C43BAA1B81399FE9C2DCEF339589ABB68
8FE3ABBBD2B12611719939DCDB822AFD1B758D69AB4BE84DF36418F1E2A12C7F
A4B8C8B698E618CAF2F65771CACC554EA0E2E91A1A5C6EB7> |-
/g34 <1C60D8A8C9B78FDBCCAD9548282AF13F34E72AA3808B96235A8CC7B2F9
6B211355AAE27FD2A319E8C551D0FB> |-
/g35 <1C60D8A8C9B78FDBCCDD37F48CAE07C4888F50A9F9BA2151DEBAB3E0D5
2EA38D5A69998CA75F1A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 21 /g23 put
dup 22 /g24 put
dup 23 /g25 put
dup 24 /g26 put
dup 25 /g27 put
dup 26 /g28 put
dup 27 /g29 put
dup 28 /g30 put
dup 29 /g31 put
dup 30 /g32 put
dup 31 /g33 put
dup 32 /g34 put
dup 33 /g35 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 222{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
100.5 223.2 mo
(\025\026\027\030\031\024\017\004)
[8.98511 7.99493 12.48 8.3851 8.38499 6.1951 8.08504 0 ]xsh
165.6 223.2 mo
(\032)sh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
174.8 229.5 mo
(\001)sh
179.8 229.5 mo
(\010)sh
184.6 216.9 mo
(\005\033\007)
[3.09724 4.59361 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
195.4 223.2 mo
(\004\022\002\020\004\032)
[4.58992 7.88991 8.10008 8.3851 4.00493 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
237.5 229.5 mo
(\001)sh
242.6 229.5 mo
(\006)sh
247.4 216.9 mo
(\005\033\007\004)
[3.09724 4.49791 3.19293 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
39.5 245.8 mo
(\031\023\015\002\034\004\035\022\034\034\017\020\004\036)
[8.38499 6.09011 4.59 8.10008 7.5901 4.58994 4.80011 7.8899 7.50011 7.5901 7.99503 8.3851 
4.58993 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
131.9 239.6 mo
(\005\037\027\022\016\007)
[3.09724 3.09717 7.20361 4.59355 4.29781 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
39.5 260.8 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
46.5 255.7 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
57.5 260.8 mo
(\003\004\005)
[4.40405 3.59994 0 ]xsh
70 260.8 mo
(\001\006\007)
[6.89995 6.79208 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
88.1 255.7 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
91.9 260.8 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
99.9 260.8 mo
(\010)sh
true set_gvm
%ADOBeginSubsetFont: YCFBAA+DejaVuSans-Oblique AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUX+DejaVuSans-Oblique dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1 <1C60D8A8C9C4A6C2B70017EF4A1EF03F2FD9096039801C7A9B3B1B96B5E
55F4F57> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUX+DejaVuSans-Oblique /Encoding get
dup 1 /g1 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUX+DejaVuSans-Oblique*1 
[/.notdef /g1 254{/.notdef}rp]
OGZVUX+DejaVuSans-Oblique nf
OGZVUX+DejaVuSans-Oblique*1 [12 0 0 -12 0 0 ]msf
106.7 260.8 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
106.7 265.8 mo
(\011)sh
110.2 255.7 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60181 2.49783 2.49783 3.60182 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
132.3 260.8 mo
(\003\004\012)
[4.48805 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
147.3 255.7 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
151.2 260.8 mo
(\003\004\013)
[4.40405 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
167 255.7 mo
(\002)sh
149.4 360.1 mo
32.4 360.1 li
32.4 295.3 li
266.4 295.3 li
266.4 360.1 li
149.4 360.1 li
cp
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g17 <1C60D8A8C9B7E522167FA3BA8F015642BF8FFC81F8C833019CB6262388
5DC9CCF684D980EC358D809374CE75F0305BC8C5D917A136D6D2887BCFDE8372
AE598AF82F1F576ECECB67C1CAB259608345AAF6B4A5CD996AAD6296BA932156
71D790C40BE6805BE076737ECDEB85673B9F32DACF81676F31D04CC9F38FB02A
2DE6857B5007D8C52FEFBADE9595FC8645FB8F8852D3AA8785DACEFF03E21594
1E18> |-
/g18 <1C60D8A8C9B7D61BC475D0E98B5298467ADA12155B5BAAAF7A3AE15565
778180277E337798F2E790D7C734A6B80F3F6FE091BE24BF5B9E2DC9AE4FF4A4
9282AC41E2A50A041E5529F41426933A4A5EBB70AE097EFAE9480262C8FBF35C
A2F2> |-
/g19 <1C60D8A8C9B799EBE22E938AF9D819DF947918419A06748B9BFA1B0A4A
9A06AC0777ED4DD34AC94742FAD2785292A970B92674AB7BBDF57A347D959E60
5544AF4C5097B160F0E3763BA2261E976E7B> |-
/g20 <1C60D8A8C9B799EBD2859A0406C45B97C9A4377D249A111B247D81D1F2
57FF1C1BA4568A4F4ACE45BF77232642591DC78AA5EE483F55BAF45127DAC1C3
39759FDB3334D7063A189CFB16> |-
/g21 <1C60D8A8C9B845C8740AF45A9F67720EC76C8883FF31A096DDDC600BB0
664640F9C78F040C08F975C936DC00> |-
/g22 <1C60D8A8C9B751D5079FE62ADB818D88D7D3EB17E37B68538E3F3F13B7
D02C9777197750> |-
/g23 <1C60D8A8C9B72C0FF1548E2C08436C1846B03CC5FDCE04FF9BBF96939D
5567EA209FD49F1427D313BE2ED402CF1A2C5716A690C9B2FA694D9B5401B55E
789E363B> |-
/g24 <1C60D8A8C9B7C56CBBD64E1E84ECF7CE24845E0B5D19498E95F7CA0D3F
46EA2A831F35D1C4EC880E6B795E10D821391BFC68C66531CD59F68D4FEE3709
B7A2C0DE111681834CB8F722E5E208E06D6594BCFF953DE81A935619F43F100B
CB81FEE2855801CA5C91A06484> |-
/g25 <1C60D8A8C9B72C0FF1D7EF53377411045DC7C745A010> |-
/g26 <1C60D8A8C9B673A56875F9E1AD4CE706DC22CD87C4A3E1AF64BF815EBA
D1FACFFB153D4CE8B041CF486C> |-
/g27 <1C60D8A8C9B72C0FF1EF0D03B0D71BD621A73E676626ACBCA2611BF6E3
4720C6155F35D3B3285A7E11E3AC2B0650F44F30E12D5D59C15CD58D451A755C
60D306> |-
/g28 <1C60D8A8C9B72C0FF110EE17684D44F73BA25FA0173867063EAA98F61F
E0FF5AD5DD43CE72095E8750A92AC2F09F57D6271A4AC579554E168BB77B2546
45239C36C4831212651ACD8675EA5BCD117BBE> |-
/g29 <1C60D8A8C9B61D4225EE8EFDC4C34D97E7D531AC010B5688FD616B0530
DCD881189236C20C8A3E6B604622A59D530EB4EA98250B791E0E9D306B2CC0> |-
/g30 <1C60D8A8C9B799EBD2859A040350D86C2EFFA87D16ABC282D174DCAAA1
B7AAF617367D2893DFA2DAE8498587D9D9E15596911AFC563EA2E871325E0A2D
015AFC3254699ABFD482E4B57210EF5E9678AD6AED47B337447359> |-
/g31 <1C60D8A8C9B7AC3526E7E194CD4E9191C818D60A6B6332B483054E6112
872A2E51D9041541AB1275B169E3D3A7787C200F55A4A885BA0B0485B32A1C97
3F0BFA9B556ED0FF8EC0D5E6EC3306012204220D324A223F49DBD3B5B6136F66
93EA4614525506243608FD146370965DFAC26350989F69AE1FAD> |-
/g32 <1C60D8A8C9B7EE7C16F3AEC239B4A4592889C1E97E54AA2E78053874FE
6E27BBD7BAC1A10266613B72BB4DE377DEC0AF186AABCECAFC93C17D20CBB577
9DFAAE9324DA90010D9DE102115EABE2ABE713D1CB0D3E71CA4AF2179F4AFDC4
AD1395E9DC8187B619991A51258DFFB50792> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 17 /g17 put
dup 18 /g18 put
dup 19 /g19 put
dup 20 /g20 put
dup 21 /g21 put
dup 22 /g22 put
dup 23 /g23 put
dup 24 /g24 put
dup 25 /g25 put
dup 26 /g26 put
dup 27 /g27 put
dup 28 /g28 put
dup 29 /g29 put
dup 30 /g30 put
dup 31 /g31 put
dup 32 /g32 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 223{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
39.5 312.9 mo
(\001\002\013\015\005\016\021\020\005\022\011\007\007\023\014\011\006\024\005\014\006\025\026\013\005\027\030\031\032\033\034\005)
[7.19994 5.98494 8.18997 8.20511 4.58992 7.89003 8.40004 5.40006 4.58993 9.19509 4.20006 5.50505 
5.50505 8.28008 6.00011 4.20004 8.08493 8.10008 4.58992 6.00011 7.99492 4.48511 7.30498 8.18997 
4.49992 5.50507 8.8951 5.50507 9.58502 5.58006 5.29507 0 ]xsh
39.5 330.3 mo
(\035\011\002\036\005\037\006\013\007\007\011\037\011\013\024\002\014\005\013\026\003\025\023\003\002\013 \005\003\002\005\024)
[11.19 4.20006 5.98494 8.10008 4.58992 7.39493 7.99493 8.18997 5.50505 5.58004 4.20006 7.39493 
4.20005 8.09998 8.19008 5.98492 6.00012 4.5899 8.09999 7.37997 7.88992 4.39508 8.28008 7.88991 
5.98495 8.18997 8.3851 4.49992 7.88991 6.08995 4.49991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
39.5 345.2 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
46.5 340.1 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
57.5 345.2 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
65.5 345.2 mo
(\006)sh
OGZVUX+DejaVuSans-Oblique*1 [12 0 0 -12 0 0 ]msf
72.3 345.2 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
72.3 340.1 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60181 2.49783 2.49783 3.60182 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
94.5 345.2 mo
(\003\004\010)
[4.40405 3.59994 0 ]xsh
OGZVUX+DejaVuSans-Oblique*1 [12 0 0 -12 0 0 ]msf
109.2 345.2 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
109.2 350.2 mo
(\011)sh
112.7 340.1 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60181 2.59443 2.49783 3.60182 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
134.9 345.2 mo
(\003\004\012)
[4.48805 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
149.9 340.1 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
153.7 345.2 mo
(\003\004\013)
[4.48805 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
169.6 340.1 mo
(\002)sh
149.4 450.1 mo
32.4 450.1 li
32.4 385.3 li
266.4 385.3 li
266.4 450.1 li
149.4 450.1 li
cp
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g33 <1C60D8A8C9B7F000DE593A1F4208DF56610B97A680C25876FE693818C1
1E25403A1EE59281> |-
/g34 <1C60D8A8C9B657193ECE2630C6E1145FB78DDDC9E76F14AF897CB946D6
4124A965D262225F283371E2FEDE3F3192534B1EEF35CB6804B6C8008EEC87DF
2F8233F405AA156FEFE6464CFCB5DAEB88EE9533602FBEAFF9F59927489D4574
22D22040FAB61D9E72B5D5278CE501123008608AC5AA52CDECD10E9462EF34FE
A54D> |-
/g35 <1C60D8A8C9B7832496CC79F39377A6F871CBF41D770A9592294A7EC2D9
6FB30B4975488C635D9EF55F0B818A90> |-
/g36 <1C60D8A8C9B7A59EA7B75B0894EBBB833958188EA72C9CDF6EE00E77F7
0CFDFBB7DC31C597F663AD367AE808D9E74BDA62D71F130E6C0F02DAEABA0227
767867094E48B9DC1DA52205CD26433BEA62F7421F6304AC9EFFB30CCC13F67F
0452471D4785D455498C26CDCD44B2B53A24079BE73E68752778E7BC5342ABBC
4D72C738DE539C6C166C06537AC39B6A14D351A29E1790E6C1EAD029B41F1B9A
4935A9CC23C9FB05A72C6D876F406B06D12034BB148D95D9438A765A3E55E559
AC6A6D8F78580FBE23515A417AF3A0C5DDB0BFD0ABB86B0634BDD251D3AFDD23
2B4AD2594491BE29B8C488A7D950166C2F2244B91ADD47774CC488A43A917C4D
B7C10D9C3BFE982D5A2D442B09C916F26D33DD63DAFB> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 33 /g33 put
dup 34 /g34 put
dup 35 /g35 put
dup 36 /g36 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 219{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
39.5 402.9 mo
(\001\002\013\015\005\016\030\020\005!"\022#\005\011\024\002\013$\004\003\002\011\006\024)
[7.19994 5.98494 8.18997 8.20511 4.58992 7.89003 8.89511 5.40006 4.58993 8.70008 10.0951 9.19509 
8.08507 4.49992 4.20004 8.19009 5.98492 8.09998 7.5901 5.88 7.88992 5.98494 4.20006 7.99492 
0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g36 <1C60D8A8C9B6571931BC8452C97041111A0D6CDB468D791EFFF7353BE3
AB021FC3643AA6583B1DFDDF07EDECBC9F98641A09A505B895604BA7AEE101D2
46280020B90CE48250E7E217127CA5E5BD688743EEF8E0798FCD45B971E67C94
7A950E5FA77470A0C5AB0F69FDF010A0191DEFB5A28B2824DDB5A7489C6D827F
2DE3F18EF4F6AFC265AC6A2BF0D65C09C2298EA75AD5325C12C703770A5AA7BA
F11B1BB7AEAC1E3214E275208CF102DA8CA409071231AC22D765D55B6D> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 34 /g36 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 /g36 221{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
215.4 402.9 mo
(\004\031\023\015\002\034)
[4.58992 8.38499 6.0901 4.5 8.19008 0 ]xsh
39.5 420.7 mo
(")sh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
49.6 414.4 mo
(\005\033\007)
[3.09724 4.59362 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
39.5 435.6 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
46.5 430.6 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
57.5 435.6 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
65.5 435.6 mo
(\005)sh
70 435.6 mo
(\001\006\007)
[6.98395 6.68408 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
88.1 430.6 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60181 2.59443 2.49783 3.60181 0 ]xsh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
110.3 435.6 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
118.3 435.6 mo
(\005\001\010\007)
[4.48805 6.89995 6.79201 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
140.9 440.6 mo
(\011)sh
144.4 430.6 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60182 2.49782 2.59444 3.60182 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
166.6 435.6 mo
(\003\004\012)
[4.40405 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
181.6 430.6 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
185.4 435.6 mo
(\003\004\013)
[4.48805 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
201.3 430.6 mo
(\002)sh
455.4 180 mo
338.4 180 li
338.4 115.2 li
572.4 115.2 li
572.4 180 li
455.4 180 li
cp
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g37 <1C60D8A8C9B78FDBCC012FC88DFCC2A4F50A13B7AA4EA497B001A2AFC6
243F59D9294CA08D32898B3E88C62FEF30EE698569D9BAE12FCD682437BC5CD2
84D3E7D12DD382570C4233721496034CD03C85E8D5F7C26569A935EB6F9998E7
F232C933BF41C23A332FAE06B9E2B61210AC1308CD5285C5C7F061575509F5BD
5D489229F6C14D070EB8809B9848C66F9D172E5FE5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 37 /g37 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 218{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
345.5 133.2 mo
(\001\002\013\015\005%\020\005)
[7.19995 5.98492 8.18997 8.20511 4.5899 7.89005 5.40005 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g37 <1C60D8A8C9B75A17CFBC019C901FE248A62E4A3478ED59D3DC08555E5E
AB1DE6416FF85A1271EDA359FA75FEB9AFCF12FEA5D9B7EFD3CD6908C70437A4
DF5F1F03572C9E86AB94894B5E393690CF91A87DD1CA456967EDDE8F67E8288A
06F3BF39B8A38E5313CDFEA5CEF2454089D996CBC8B548704ECD4F32135C05C6
3B65AA1FF84117FAEC9A8BDE7E5FED0DF0966533009C78731CEA3E10718BE27B
E62FF884F663E0CCB608E0309C6491B2DD609304A2C36169B332A65D29F5BB> |-
/g38 <1C60D8A8C9B6A3513F01EC15F85BD0B47DCD6696DA559318F10F22FFC6
C9AA64D722CEED52296692CBA1DFF0F2B7E53E07228308728CA0E99A1BB21492
8A035BAEB3A79A7A94ADFBE857BCF9A4042DD56FCF34221627C33422D6D19279
115B6B58DA0DE7C9468B7B606FD800148443BB338E2F0B46D4D3A67927987541> |-
/g42 <1C60D8A8C9B67DB5AEC4482BB62443FC57D1611013576293B330A2FA2D
C115381971516EDAFBCCDABB9FC4754EB2425C91DE88AD8F8A1136C95288DFB4
1932754475A8B3D40A769B411B220BB4C2F08F16261B2E07B9BAF641B17C809F
9752590DD8DE23> |-
/g43 <1C60D8A8C9B7D61BC4D93DC17CBDAF84E54B0DBC3E12AA87808603F737
BBEF5E3EB1377E49CC73EB8B933A8F6187D723DA35E6A10AF5D32176018A1E40
11BF7399E2A52EE506F5E4DC6389D2915918880A95B0CE7AEF36BC3765AA7599
29997378A4012A197CB561D504B6C418FC595067> |-
/g44 <1C60D8A8C9B7F000DF67512405D5432B0BB6AAFEBDDE96DE34455D2F99
4FE071BA80E0F8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 35 /g37 put
dup 36 /g38 put
dup 37 /g42 put
dup 38 /g43 put
dup 39 /g44 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 /g36 /g37 /g38 /g42 /g43 /g44 
216{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
397.6 133.2 mo
(\025\026\027\030\031\024\017\004#)
[8.98511 7.99493 12.48 8.38513 8.38498 6.1951 8.08502 4.49994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
469.9 126.9 mo
(\002 )
[4.69806 0 ]xsh
479.2 126.9 mo
($)sh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
486.3 133.2 mo
(\003\004)
[5.50507 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: JGLAAA+OpenSymbol AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUY+OpenSymbol dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g1 <1C60D8A8C9B79676F455C60B708904C49AA22F4C3757651038018BA3FA6
9C5111E94554574C18EC21DA8A56C2BDF45D5EAF4785BB65FB7190BE1CAA2A9A
0C9E9E807958A892524344C2161D20F53B0E9B8E627BFEB1591F91C5D5E64A80
85A052C52B84F0396E50527C867C5745D5C4CF4647117B07517F3BE826B80B56
85DFD164139C19F3E87E3ED0397C8169D9E01C6307E6C538AD34932219349F9A
410977A56CD143DE437FB4E01CEFD898A4F80D752DAD89E88EC894792196294E
9C7E4CDE9592C0B4063A5E44DB0F915180900B848B481A556CAF27EEB332EBDC
D9F071F64FA104BE5473EFE576E8AE1D680B75E4F19692FD8428B7A690E718B7
B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUY+OpenSymbol /Encoding get
dup 1 /g1 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUY+OpenSymbol*1 
[/.notdef /g1 254{/.notdef}rp]
OGZVUY+OpenSymbol nf
OGZVUY+OpenSymbol*1 [15 0 4.0191 -15 0 0 ]msf
496.3 133.2 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
504.6 139.5 mo
(\033)sh
509.2 126.9 mo
(\002 )
[4.69806 0 ]xsh
518.4 126.9 mo
($)sh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
525.5 133.2 mo
(\003\004%)
[5.50507 4.5899 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
545.3 126.9 mo
(\032&')
[5.29828 5.2984 0 ]xsh
.895628 .7673 0 0 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
345.5 153 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
352.5 147.9 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
356.3 153 mo
(\003)sh
.895628 .7673 0 0 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
360.7 153 mo
(\004\005)
[3.59995 0 ]xsh
368.8 153 mo
(\001\006\007)
[6.98395 6.68408 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
386.9 147.9 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
390.7 153 mo
(\003)sh
.895628 .7673 0 0 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
395.2 153 mo
(\004\005\001\010)
[3.59995 4.40405 6.98395 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
416.9 158 mo
(\011)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
420.4 153 mo
(\007)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
424.8 147.9 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
428.7 153 mo
(\003)sh
.895628 .7673 0 0 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
433.1 153 mo
(\004\012)
[3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
443.7 147.9 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
447.5 153 mo
(\003\004\013)
[4.48807 3.59991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
463.4 147.9 mo
(\002)sh
455.4 270 mo
338.4 270 li
338.4 205.2 li
572.4 205.2 li
572.4 270 li
455.4 270 li
cp
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g38 <1C60D8A8C9B78FDBC359B368D54D3F3377588471D227A6EBB7F6123972
9D53AECDE433A1FCD3FA7CBD5601CFB513CFD3FAD299B9CF04> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 38 /g38 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 /g38 217{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
345.5 223.2 mo
(\001\002\013\015\005&\017\020\005)
[7.19995 5.98492 8.18997 8.20511 4.5899 7.89005 8.88007 5.40005 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g45 <1C60D8A8C9B72C0FF1CF52E7F4918182BCF88C87B315C9D2> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 40 /g45 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 /g36 /g37 /g38 /g42 /g43 /g44 
/g45 215{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
406.5 223.2 mo
(\025\026\027\030\031\024\017\004\032)
[8.98511 7.99493 12.48 8.3851 8.38501 6.1951 8.08505 3.8999 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
480.1 229.5 mo
(\001)sh
485.2 229.5 mo
(\010)sh
490 216.9 mo
(\005\037\007)
[3.09723 3.0972 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
499.3 223.2 mo
(\004\022\002\020\004\032)
[4.58994 7.88989 8.19009 8.2951 4.00488 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
541.4 229.5 mo
(\001)sh
546.5 229.5 mo
(\006)sh
551.3 216.9 mo
(\005\037\007\004)
[3.09723 3.09717 3.09723 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
345.5 245.9 mo
(\031\023\015\002\034\004\035\022\034\034\017\020\004\036)
[8.38501 6.09009 4.59 8.10007 7.59012 4.58994 4.80011 7.88989 7.50012 7.59009 7.99506 8.3851 
4.58994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
437.9 239.6 mo
(\005\037\(!\007)
[3.09723 3.0972 3.19293 4.49792 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
345.5 260.8 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
352.5 255.7 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
363.5 260.8 mo
(\003\004\005)
[4.40405 3.59995 0 ]xsh
376 260.8 mo
(\001\006\007)
[6.89996 6.79205 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
394.1 255.7 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
397.9 260.8 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
405.9 260.8 mo
(\010)sh
OGZVUX+DejaVuSans-Oblique*1 [12 0 0 -12 0 0 ]msf
412.7 260.8 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
412.7 265.8 mo
(\011)sh
416.2 255.7 mo
(\002 !\003\005\037\007)
[3.79504 3.60181 3.60181 2.49783 2.49783 2.49777 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
437.3 260.8 mo
(\003\004\012)
[4.40405 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
452.3 255.7 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
456.1 260.8 mo
(\003\004\013)
[4.40405 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
471.9 255.7 mo
(\002)sh
455.4 360.1 mo
338.4 360.1 li
338.4 295.3 li
572.4 295.3 li
572.4 360.1 li
455.4 360.1 li
cp
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g39 <1C60D8A8C9B72C0FF159867A4B4A5C5532067535731D390A00B9654C5C
E11860E7ADE1A087CB4329C53875388709B5F8CECC56E0EFB1FB6959E8E24FFB
0E5EC50ABFA9D86A69F9D918768CB8488ED497C183FB1E5A1C01A89F33697FF8
54D262C00ABC5431872D5CB8609C9A4C9770D03FFCD6241D0802> |-
/g40 <1C60D8A8C9B78FDBCCFA921B05955D74B11D075D44D348DB3F66E0BD83
1BC9F08D13BECC4FF8F09D1E> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 39 /g39 put
dup 40 /g40 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 /g38 /g39 
/g40 215{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
345.5 312.8 mo
(\001\002\013\015\005&\021\020\005)
[7.19995 5.98492 8.18997 8.20511 4.5899 7.89005 8.40002 5.40009 0 ]xsh
406 312.8 mo
(\022\011\007\007\023\014\011\006\024\005\037\006\004\004\013\037\002\011\006\024\034\005)
[9.1951 4.20004 5.50507 5.58005 8.19009 6.00009 4.29004 7.99493 8.1001 4.5899 7.39493 8.08493 
5.80502 5.88 8.18997 7.39493 5.98492 4.20007 8.08496 8.19006 5.29504 0 ]xsh
345.5 330.2 mo
(\035\011\002\036\005\037\006\013\007\007\011\037\011\013\024\002\014\005\007\004\006\012\005'\031\(\005\011\002\013\004)
[11.1901 4.20004 5.98495 8.10007 4.58994 7.3949 7.99493 8.18997 5.50507 5.58005 4.20004 7.39493 
4.20007 8.09998 8.19006 5.98492 6.00012 4.5899 5.50507 5.88 7.99493 12.48 4.49991 5.57996 
5.50507 7.89001 4.58997 4.20001 5.98492 8.09998 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
345.5 345.1 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
352.5 340.1 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
363.5 345.1 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
371.5 345.1 mo
(\006)sh
OGZVUX+DejaVuSans-Oblique*1 [12 0 0 -12 0 0 ]msf
378.3 345.1 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
378.3 340.1 mo
(\002 !\003\005\037\007)
[3.79504 3.60181 3.60181 2.49783 2.49783 2.59439 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
399.4 345.1 mo
(\003\004\010)
[4.40405 3.59995 0 ]xsh
OGZVUX+DejaVuSans-Oblique*1 [12 0 0 -12 0 0 ]msf
414.1 345.1 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
414.1 350.2 mo
(\011)sh
417.6 340.1 mo
(\002 !\003\005\037\007)
[3.89163 3.60181 3.60184 2.49783 2.4978 2.4978 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
438.7 345.1 mo
(\003\004\012)
[4.48807 3.59991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
453.7 340.1 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
457.6 345.1 mo
(\003\004\013)
[4.40405 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
473.4 340.1 mo
(\002)sh
455.4 450.1 mo
338.4 450.1 li
338.4 385.3 li
572.4 385.3 li
572.4 450.1 li
455.4 450.1 li
cp
@
.726955 .665003 .650568 .778531 cmyk
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
345.5 402.8 mo
(\001\002\013\015\005&\030\020\005)
[7.19995 5.98492 8.18997 8.20511 4.5899 7.89005 8.89511 5.40005 0 ]xsh
406.5 402.8 mo
(!"\022#\005\011\024\002\013$\004\003\002\011\006\024)
[8.70007 10.0951 9.28513 7.99506 4.49991 4.20004 8.19009 5.98495 8.18994 7.50012 5.88 7.88992 
5.98492 4.20004 8.08496 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
521.4 402.8 mo
(\004\031\023\015\002\034)
[4.5899 8.38501 6.09009 4.59003 8.1001 0 ]xsh
345.5 420.6 mo
(")sh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
355.6 414.3 mo
(\005\037\007)
[3.09723 3.0972 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
345.5 435.5 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
352.5 430.5 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
363.5 435.5 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
371.5 435.5 mo
(\005)sh
376 435.5 mo
(\001\006\007)
[6.98395 6.68408 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
394.1 430.5 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60181 2.59445 2.4978 3.60184 0 ]xsh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
416.3 435.5 mo
(\003\004)
[4.40405 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
424.3 435.5 mo
(\005\001\010\007)
[4.48807 6.89993 6.79199 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
446.9 440.6 mo
(\011)sh
450.4 430.5 mo
(\002 !\003\005\033\007)
[3.79504 3.60181 3.60181 2.49783 2.59442 3.60184 0 ]xsh
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
472.6 435.5 mo
(\003\004\012)
[4.40405 3.59995 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
487.6 430.5 mo
(\002)sh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
491.4 435.5 mo
(\003\004\013)
[4.48807 3.59991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
507.3 430.5 mo
(\002)sh
455.4 630 mo
338.4 630 li
338.4 565.2 li
572.4 565.2 li
572.4 630 li
455.4 630 li
cp
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g41 <1C60D8A8C9B78FDBCC683240A3EB7E29BFF2FF0FE25906B52BC63C1D30
90A8EE752C50AB0C5426B15392E0B2AB10D0A2370E8E4D3F6B8CF3E52B75EAB3
AEB2358D470A4E8EB3360EFD1553D1AA5A8F217819A5085A416B5FC91A8A3B6F
F3E9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 41 /g41 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 /g38 /g39 
/g40 /g41 214{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
345.5 583.2 mo
(\001\002\013\015\005\)\020\005)
[7.19995 5.98492 8.18997 8.20511 4.5899 7.89005 5.40005 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g46 <1C60D8A8C9B70A9A6151BFF723EDD883CBCE9ECF37464F4C7ECECCA78D
B66CAF16774792247EA8A013C25DA46C99C731D697425562B24142240FF9397A
D01710B2520D4C1C2763A80D30B9F4700661C0508438DB3AEEC15A87B25906EA
FAD9F56867F21A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 41 /g46 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 /g36 /g37 /g38 /g42 /g43 /g44 
/g45 /g46 214{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
397.6 583.2 mo
(&\017\)\015\002\017\004#)
[9.1951 8.08502 5.89502 4.59 8.19009 7.99503 4.58994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
453.4 576.9 mo
(\002 !)
[4.69806 4.49789 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
467.2 583.2 mo
(\003\004\031\030\020\022\024\017\004%)
[5.50507 4.58994 8.38498 8.3851 8.3851 7.88992 6.1951 8.08502 4.49994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
345.5 598.1 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
352.5 593 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
363.5 598.1 mo
(\003\004\005)
[4.40405 3.59995 0 ]xsh
376 598.1 mo
(\001\006\007)
[6.89996 6.79205 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
394.1 593 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
405.1 598.1 mo
(\003\004\005\001\010)
[4.40405 3.59995 4.48804 6.89996 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
431.3 603.1 mo
(\011)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
434.7 598.1 mo
(\007)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
439.2 593 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
450.2 598.1 mo
(\003\004\012)
[4.48807 3.59991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
465.2 593 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
476.2 598.1 mo
(\003\004)
[4.48807 0 ]xsh
0 .990631 1 .000396735 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
484.3 598.1 mo
(\013)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
492.1 593 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
455.4 720 mo
338.4 720 li
338.4 655.2 li
572.4 655.2 li
572.4 720 li
455.4 720 li
cp
.750179 .679652 .670191 .901488 cmyk
@
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g47 <1C60D8A8C9B61D42253AAAFFB7D3E92A7E901F3AA2E1EBC89565D31A0E
FC0FE2B9ACC27035CF641A8920276C3FED9F3D80A8145D77136F8F580A0642A5
728D36FAD202> |-
/g48 <1C60D8A8C9B7F2A7FC3488F090C70F135ECBB8C84197A85E19AB9EF3E7
AD5F5B3D470A80364BE2E30E16B467> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 42 /g47 put
dup 43 /g48 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 /g36 /g37 /g38 /g42 /g43 /g44 
/g45 /g46 /g47 /g48 212{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
345.5 672.8 mo
(\025\026\027\030\031\024\017\004\002\017*\004)
[8.98511 7.99493 12.48 8.3851 8.38501 6.1951 8.08505 4.5899 8.1001 7.99503 11.19 0 
]xsh
442.6 672.8 mo
(+)sh
451.3 672.8 mo
(\024)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
345.5 687.7 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
352.5 682.6 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
363.5 687.7 mo
(\003\004\005)
[4.40405 3.59995 0 ]xsh
376 687.7 mo
(\001\006\007)
[6.89996 6.79205 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
394.1 682.6 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
405.1 687.7 mo
(\003\004\005\001\010)
[4.40405 3.59995 4.48804 6.89996 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
431.3 692.7 mo
(\011)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
434.7 687.7 mo
(\007)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
439.2 682.6 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
450.2 687.7 mo
(\003\004\012)
[4.48807 3.59991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
465.2 682.6 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
476.2 687.7 mo
(\003\004\013)
[4.48807 3.59991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
492.1 682.6 mo
(\002 !)
[3.79504 3.60181 0 ]xsh
1.4 lw
0 lj
266.4 507.6 mo
302.4 507.6 li
302.4 147.6 li
322.9 147.6 li
@
338.4 147.6 mo
322.2 142.2 li
322.2 153 li
338.4 147.6 li
cp
ef
149.4 360.1 mo
149.4 369.8 li
@
149.4 385.3 mo
154.8 369.1 li
144 369.1 li
149.4 385.3 li
cp
ef
455.4 180 mo
455.4 189.8 li
@
455.4 205.2 mo
460.8 189 li
450 189 li
455.4 205.2 li
cp
ef
455.4 360.1 mo
455.4 369.8 li
@
455.4 385.3 mo
460.8 369.1 li
450 369.1 li
455.4 385.3 li
cp
ef
455.4 450.1 mo
455.4 459.7 li
@
455.4 475.2 mo
460.8 459 li
450 459 li
455.4 475.2 li
cp
ef
455.4 630 mo
455.4 639.7 li
@
455.4 655.2 mo
460.8 639 li
450 639 li
455.4 655.2 li
cp
ef
0 lw
1 lj
149.4 180 mo
32.4 180 li
32.4 115.2 li
266.4 115.2 li
266.4 180 li
149.4 180 li
cp
@
.726955 .665003 .650568 .778531 cmyk
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
39.5 133.2 mo
(\001\002\013\015\005\(\020\005)
[7.19994 5.98494 8.18997 8.20511 4.58992 7.89003 5.40007 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
91.6 133.2 mo
(\025\026\027\030\031\024\017\004#)
[8.98511 7.99493 12.48 8.38509 8.38501 6.19508 8.08504 4.49994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
163.9 126.9 mo
(\002 )
[4.69804 0 ]xsh
173.2 126.9 mo
($)sh
180.3 126.9 mo
(\003)sh
OGZVUV+TrebuchetMS*1 [8.7 0 0 -8.7 0 0 ]msf
183.4 126.9 mo
(\015\004\013 )
[4.88947 3.39301 4.60228 0 ]xsh
OGZVUV+TrebuchetMS*1 [15 0 0 -15 0 0 ]msf
201.3 133.2 mo
(\034\005)
[5.40007 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
211.2 133.2 mo
(%)sh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
220.9 126.9 mo
(\032&')
[5.29831 5.29836 0 ]xsh
OGZVUV+TrebuchetMS*1 [8.7 0 0 -8.7 0 0 ]msf
236.5 126.9 mo
(\034\015\004\013 )
[3.09724 4.99385 3.2973 4.69798 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
39.5 148.1 mo
(\001)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
46.5 143 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
50.3 148.1 mo
(\003\004\005)
[4.40405 3.59994 0 ]xsh
62.8 148.1 mo
(\001\006\007)
[6.89995 6.79208 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
80.9 143 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
84.7 148.1 mo
(\003\004\005\001\010)
[4.40405 3.59994 4.48805 6.89996 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
110.9 153.1 mo
(\011)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
114.3 148.1 mo
(\007)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
118.8 143 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
122.6 148.1 mo
(\003\004\012)
[4.48805 3.59994 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
137.6 143 mo
(\002)sh
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
141.4 148.1 mo
(\003\004)
[4.48805 0 ]xsh
.750179 .679652 .670191 .901488 cmyk
OGZVUW+TrebuchetMS-Italic*1 [12 0 0 -12 0 0 ]msf
149.5 148.1 mo
(\013)sh
OGZVUW+TrebuchetMS-Italic*1 [6.9 0 0 -6.9 0 0 ]msf
157.3 143 mo
(\002)sh
1.4 lw
0 lj
149.4 90 mo
149.4 99.7 li
@
149.4 115.2 mo
154.8 99 li
144 99 li
149.4 115.2 li
cp
ef
149.4 180 mo
149.4 189.7 li
@
149.4 205.2 mo
154.8 189 li
144 189 li
149.4 205.2 li
cp
ef
149.4 270 mo
149.4 279.8 li
@
149.4 295.3 mo
154.8 279.1 li
144 279.1 li
149.4 295.3 li
cp
ef
455.4 270 mo
455.4 279.8 li
@
455.4 295.3 mo
460.8 279.1 li
450 279.1 li
455.4 295.3 li
cp
ef
.598749 .514733 .509422 .206455 cmyk
true set_gvm
%ADOBeginSubsetFont: GXABAA+TrebuchetMS-Italic AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUW+TrebuchetMS-Italic dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g50 <1C60D8A8C9B71A73359FAB977680E88652839FB97F9EA08EB1EC47CB3D
0A94B14287EBB9AE13F8E2066E2B5174B5072C1762C9BBA93885DA90131B2FFE
4C210A92> |-
/g51 <1C60D8A8C9B74F3662037CB86B62F4C07E6FC8D9C0DD557A51F665378B
7458831E2F61E99A641ACAE977C27C343B4060D737C5F360A2C1D59AF15496F1
D94748DC77F2C147287C41492F4CCAF9312AB14742304AC05D06BE52E82F5BD8
958327E8E384EF2690244242> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUW+TrebuchetMS-Italic /Encoding get
dup 44 /g50 put
dup 45 /g51 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUW+TrebuchetMS-Italic*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g14 /g15 /g16 /g17 
/g18 /g19 /g20 /g21 /g22 /g23 /g24 /g25 
/g26 /g27 /g28 /g29 /g30 /g31 /g32 /g33 
/g34 /g35 /g36 /g37 /g38 /g42 /g43 /g44 
/g45 /g46 /g47 /g48 /g50 /g51 210{/.notdef}rp]
OGZVUW+TrebuchetMS-Italic nf
OGZVUW+TrebuchetMS-Italic*1 [16 0 0 -16 0 0 ]msf
71.6 608.1 mo
(\030,\017\020\015-\024\026,)
[8.80011 6.688 8.49604 8.89612 4.896 7.29599 6.7041 8.49593 0 ]xsh
105 589.6 mo
105 587.3 105.4 585.5 106.1 583.9 cv
@
109.5 579.3 mo
111 578.2 112.7 577.3 114.5 576.5 cv
@
120 574.9 mo
121.9 574.4 123.8 574.1 125.7 573.7 cv
@
131.4 572.6 mo
133.3 572.2 135.2 571.8 137 571.2 cv
@
142.3 569 mo
144 568 145.5 566.9 146.7 565.4 cv
@
149 560.3 mo
149.2 559.2 149.4 557.9 149.4 556.5 cv
@
0 lw
1 lj
149.4 540 mo
32.4 540 li
32.4 475.2 li
266.4 475.2 li
266.4 540 li
149.4 540 li
cp
.750179 .679652 .670191 .901488 cmyk
@
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
39.5 493.2 mo
(&\017\)\015\002\017\004\036)
[9.1951 8.08504 6.00002 4.5 8.19008 7.99503 4.58993 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
92.3 499.5 mo
(\001)sh
97.3 499.5 mo
(\010)sh
102.1 486.9 mo
(\005\033\007)
[3.19294 4.49792 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
112.9 493.2 mo
(\004\022\002\020\004\036)
[4.58992 7.88992 8.19008 8.3851 4.49992 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
150.7 499.5 mo
(\001)sh
155.8 499.5 mo
(\006)sh
160.6 486.9 mo
(\005\033\007)
[3.09724 4.59361 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
171.4 493.2 mo
(\004)sh
1.4 lw
0 lj
149.4 450.1 mo
149.4 459.7 li
.750179 .679652 .670191 .901488 cmyk
@
149.4 475.2 mo
154.8 459 li
144 459 li
149.4 475.2 li
cp
ef
0 lw
1 lj
455.4 540 mo
338.4 540 li
338.4 475.2 li
572.4 475.2 li
572.4 540 li
455.4 540 li
cp
@
.726955 .665003 .650568 .778531 cmyk
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
345.5 493.2 mo
(\025\026\027\030\031\024\017\004\036)
[8.98511 7.99493 12.48 8.3851 8.38501 6.1951 8.08505 4.5899 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
414.9 499.5 mo
(\001)sh
419.9 499.5 mo
(\010)sh
424.7 486.9 mo
(\005\037\007)
[3.09723 3.0972 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
434 493.2 mo
(\004\022\002\020\004\036)
[4.58994 7.88989 8.19009 8.3851 4.49991 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [8.7 0 0 -8.7 0 0 ]msf
471.9 499.5 mo
(\001)sh
476.9 499.5 mo
(\006)sh
481.7 486.9 mo
(\005\037\007)
[3.09723 3.0972 0 ]xsh
OGZVUW+TrebuchetMS-Italic*1 [15 0 0 -15 0 0 ]msf
491 493.2 mo
(\004)sh
1.4 lw
0 lj
455.4 540 mo
455.4 549.7 li
.750179 .679652 .670191 .901488 cmyk
@
455.4 565.2 mo
460.8 549 li
450 549 li
455.4 565.2 li
cp
ef
572.4 507.6 mo
619.2 507.6 li
619.2 237.6 li
587.9 237.6 li
@
572.4 237.6 mo
588.6 243 li
588.6 232.2 li
572.4 237.6 li
cp
ef
.726955 .665003 .650568 .778531 cmyk
true set_gvm
%ADOBeginSubsetFont: QWIBAA+TrebuchetMS AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
OGZVUV+TrebuchetMS dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g42 <1C60D8A8C9B7A3FAB20090A3AA14A0904CF7EC28C4B89FB6FF114972DB
7A8288D24FE6B165CE58BD78BC785902EA1585C8D37503> |-
/g43 <1C60D8A8C9B78FDBFC30D5667117BFF09A71F2B352AC29C25E582D5B7B
A17B051628> |-
systemdict /gcheck known {setglobal} if end {end} if
end
OGZVUV+TrebuchetMS /Encoding get
dup 42 /g42 put
dup 43 /g43 put
pop
%ADOEndSubsetFont
reset_gvm
/OGZVUV+TrebuchetMS*1 
[/.notdef /g1 /g2 /g3 /g4 /g5 /g6 /g7 
/g8 /g9 /g10 /g11 /g12 /g13 /g14 /g15 
/g16 /g17 /g18 /g19 /g20 /g21 /g22 /g23 
/g24 /g25 /g26 /g27 /g28 /g29 /g30 /g31 
/g32 /g33 /g34 /g35 /g36 /g37 /g38 /g39 
/g40 /g41 /g42 /g43 212{/.notdef}rp]
OGZVUV+TrebuchetMS nf
OGZVUV+TrebuchetMS*1 [.0261 15 15 -.0261 0 0 ]msf
627.1 286.4 mo
(\001)sh
627.1 293.5 mo
(\022)sh
627.1 302.8 mo
(\030)sh
627.1 311.7 mo
(\005)sh
627.1 316.2 mo
(\011)sh
627.1 320.4 mo
(\002)sh
627.1 326.4 mo
(\013)sh
627.1 334.6 mo
(\004)sh
627.1 340.5 mo
(\003)sh
627.2 348.4 mo
(\002)sh
627.2 354.4 mo
(\011)sh
627.2 358.6 mo
(\006)sh
627.2 366.6 mo
(\024)sh
627.2 374.8 mo
(\014)sh
627.2 380.8 mo
(\005)sh
627.2 385.4 mo
(\027)sh
627.2 390.9 mo
(*)sh
627.2 398.4 mo
(\005)sh
627.3 403 mo
(+)sh
627.3 410.8 mo
(\005)sh
627.3 415.3 mo
(\()sh
627.3 423.3 mo
(\034)sh
627.3 428.7 mo
(\005)sh
627.3 433.2 mo
(\032)sh
OGZVUV+TrebuchetMS*1 [.015138 8.7 8.7 -.015138 0 0 ]msf
620.8 442.9 mo
(\001)sh
620.8 447 mo
(\022)sh
620.8 452.3 mo
(\030)sh
OGZVUV+TrebuchetMS*1 [.0261 15 15 -.0261 0 0 ]msf
627.1 457.5 mo
(\033)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
true set_gvm
/OGZVUY+OpenSymbol*1 uf
/OGZVUY+OpenSymbol uf
/JGLAAA+OpenSymbol uf
reset_gvm
true set_gvm
/OGZVUX+DejaVuSans-Oblique*1 uf
/OGZVUX+DejaVuSans-Oblique uf
/YCFBAA+DejaVuSans-Oblique uf
reset_gvm
true set_gvm
/OGZVUV+TrebuchetMS*1 uf
/OGZVUV+TrebuchetMS uf
/QWIBAA+TrebuchetMS uf
reset_gvm
true set_gvm
/OGZVUW+TrebuchetMS-Italic*1 uf
/OGZVUW+TrebuchetMS-Italic uf
/GXABAA+TrebuchetMS-Italic uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *CustomPageSize True
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
